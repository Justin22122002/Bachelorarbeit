from typing import Any

import requests
import csv
import time


def query_yaraify(auth_key: str, hash_value: str) -> dict | None:
    """
    Queries the Yaraify API for a given file hash.

    :param auth_key: API authentication key
    :param hash_value: File hash to look up
    :return: Response data as a dictionary, or None if an error occurs
    """
    url: str = "https://yaraify-api.abuse.ch/api/v1/"
    headers: dict[str, Any] = {
        "Auth-Key": auth_key,
        "Content-Type": "application/json",
    }
    payload: dict[str, Any] = {
        "query": "lookup_hash",
        "search_term": hash_value,
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error querying hash {hash_value}: {e}")
        return None


def process_hashes(auth_key: str, hash_list: list, output_file: str) -> None:
    """
    Processes a list of hashes, querying the Yaraify API for each one.
    Outputs the Yara rule matches for each hash, the total number of matches,
    and saves the results to a CSV file.

    :param auth_key: API authentication key
    :param hash_list: List of file hashes to query
    :param output_file: Path to the output CSV file
    """
    results: list = []

    for hash_value in hash_list:
        print(f"Querying hash: {hash_value}")
        result: dict | None = query_yaraify(auth_key, hash_value)
        if result:
            results.append((hash_value, result))
        else:
            print(f"Failed to fetch data for hash: {hash_value}")

    # Write results to CSV
    with open(output_file, mode="w", newline="", encoding="utf-8") as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(["Hash", "yara_matches", "clamav_matches", "Match Details"])

        for hash_value, result in results:
            if result.get("query_status") == "ok" and "data" in result:
                tasks: list = result["data"].get("tasks", [])
                match_details: list = []
                yara_matches: int = 0
                clamav_matches: int = 0

                for task in tasks:
                    static_results: list = task.get("static_results", [])
                    clamav_results: list = task.get("clamav_results", [])

                    yara_matches = len(static_results)

                    for match in static_results:
                        match_details.append(
                            f"{match.get('rule_name')}:{match.get('description')} "
                        )

                    for clamav in clamav_results:
                        clamav_matches = len(clamav)

                writer.writerow([
                    hash_value,
                    yara_matches,
                    clamav_matches,
                    "|".join(match_details)
                ])
                print(f"Processed hash {hash_value} with {yara_matches} matches.")
            else:
                writer.writerow([hash_value, 0, 0, "No data available"])
                print(f"No data available for hash: {hash_value}")


def main() -> None:
    hash_list = [
        '0a83754a6e03d367af7e4a181df496b5d643d69915a4702e91c5e5b2c4918859',
        '0bd000296a27166aea20df164d56ec41d5a7283503c2e4f0f4fa057d3a12bac7',
        '0d58d4c64dd86c34cbf59c528f5b4c9120dc94431dc1019449b6b25dfd02721f',
        '0db4eb9bd85f7037e5949622f3bd73d2d62b21212b790c4116264f9ea92176e0',
        '0e9eb65eb25395a34ae9181b5e9c25f0fb0d0a0691edf2601a51b8e5611901a4',
        '1d7f315437c9b0adec98ad55a604dcea31ae25350591a95f6330e127b6c4edcd',
        '1dfc6a1b4b1551ce51faf98bcf51e656c7df051cd466c141b5764baacffbef01',
        '1f2679c6694f4a721a5daece784bd0d73194a99edf89eaa72e1c73ac00778c52',
        '2b832ec67aa044d7ddea7f2a58687ea3b19f49979414987d918a2ac7ab57e4b3',
        '2bb90142a22a52f8f31ed59a4a4202f1383a7aa0fe183de64f7e702e08dc97d1',
        '2c1487a61bbcd807564589279cd4314b866c6444198affa0a3d5432b88dcceb8',
        '2dc55319850ccba833517729306bbf99d6313f5deef29c39eff9a6e8925a2dd9',
        '2e7c584b53d31556f9f68c8786d54983a0eb649780084a5d1587188c348ee607',
        '3c6cf2b0d06d011df358561907b3070b645ba0cbc218df1a1d0ecc6770374cc5',
        '3c37debc9a1802eacd6d1d1c67e96c7919766348958b20b0b804ecc028bfef15',
        '3ee35b59b86122376980ea118db6ee299be9c4a746b14cc5b45743cb41b9dfc7',
        '3fdb31c6da60d4125b0a5b5995edf89c4a8146b1908f7a55b0f01f36e7679ccc',
        '4ba80ac7174ff768ccb119a36b6538484ef4b1b7aad842650248b619525e302d',
        '4bb49f7056cbb508109d3e1ee7c85294280536bafb08f496f25eb6363fda577e',
        '4ed3e8ee2c9fa0a8e8cd07fbe0c5c145d743dbd6cc2cd182c04301cd0d2fbfbd',

        '0d7f9a2daa3ce1ff75b726e758d99d622ac6e4c77ec216fc90853c356734dc76',
        '0f335a51a72dacc839b2b03b71c9072dec7f21d354b981e192942cc205a2f29c',
        '1a7895c50ce00d72188e1ad764fc8ddc32d7f2e437e2edd10e9229807118e10f',
        '1b5c3855bbbb82ddc6e11cac7f4c091b17067de3888363ae2cbb8e7052f46a54',
        '1b87a51faddc166e36b1018f1fa7c02f6e35f9eccfef5e5a7def342afd1e36aa',
        '1d94c9dc4102a5fd0a7efa7726aceecfcb4917ffd863ca6c379a3a6ad30bb291',
        '02ad0044106143934cf53ce9a126c8cea29233f563aa53ca7584e30cb666a87a',
        '2d5823e47a76ecf8eece6cefd85885098687ae9f0cd4c51729920df84f4fdb56',
        '2e405d7501cf30dd03f0c62f025a86ab778e8093df265f6b9874f80714ce945e',
        '3a5df5e2ea2cab2de87bbaa4c3e20684daf50245cf6738c5124fcb848a4b2827',
        '3bab265b48e6bb91db54d1eb457851df217e3ecc2c7c913c29d560db2b491c72',
        '3e8a0aea0ec65bb5188b7d252db6f7a76d9afc0831b5a21ec5c5e024a712f828',
        '3f04fed95bbe65e4245c640f73c72e9a6f3abd0bebb6873e25b1680ecb6e46ca',
        '3f6f34341a9d76d8677f9f6b5f33bb46f09cf5560fb541661d58de69cfeb0309',
        '3f11f61a14aef14bc2321d0c221ae26a227de29a69bd338cb40df0d0b7701ef3',
        '3f312823fe7f6de875d8fbaaa292b51772b40208aeba8ee6f650ad7bac2c0cf1',
        '4d0a30b447973e886de783914b49159be16c8db75aae30dbe6492a4195f1289f',
        '4d22dd3efcdc412df99ade8b2a1a72244f519894504c9abb454530a0e6fa6677',
        '05c4dc56036d88819834b9cb71520d5bb674ceb3ae28227d7d322c603606cabf',
        '5a04f84e395920346f3e0cc67de9bf00c465e2167da353f10cd371bb85f0568f',

        '0b797c9efb374e8f6bc49057367a5b3fc3c6e45885a476953b102c971698d8dd',
        '0cb17078bb20234b689836ff48c147ebcdf4abc3fe82e42ba51454fe1cb4a1e5',
        '0ed72a28ba5bac7f44f9e4519db5f8c8d94076d85a929c2004da1cba99559610',
        '1b99720ff518a77349947048153711262cb9bda67b98b654cd025426c440cbef',
        '1d773d866966940f042d442b9e0cec638e733a83f7137cbdd4e70d4cb9803ada',
        '2c127f91b268a5e6316f343781451b76bee664638987ff6d17622be8def3f864',
        '2c719454d0de13ac4564d00aa10c9e0b005b0bc91f5fc58d3bea10f067a07413',
        '2d2fa95aa9bf662fdcd71d75dc4ddb6e322b3db907d7555450c5db9def301012',
        '3a1b797876f0839e861ea4a5a44940a4fdcf84c91c12a9ff2c1f09ed01b690e1',
        '3a101185d6dfae71e84fb1c37bcd07da18d34b084ab6837d1c49f1bd99642bcc',
        '3d32e5470e02df80ebcbcd4f6d87f2c4a9163e908e8d867aa47c217268ebc310',
        '005d62ccb914fe69ed4795a68a2ec0c679e4713c50a73d90524b7bac1240fefd',
        '5f44120d86db22107653b15a11811e4a00a9d6052955120693270e17cd48c84d',
        '6a94a4a1e154a240d6803bed560b35f750b9398105e4f69537ba7a7359b27110',
        '6d832e700137573409ed9c61670d0c8984af04377504170172048996d352d431',
        '6d0338228fb76a156167342197ae7f24c1141f2d20e466000a3cd476bc8b924f',
        '6edf7c043348efe02d94c97a4d06ec735fb90a77ea290509e03991edadb24716',
        '8afc51fb904b25124bd5cb41985e917333071d1af1c6ab83cc7ae408e7cb0e7e',
        '8ba7d0adb180615be8923a26b3c3259201a73f0cb70b62f38c2d43445c2e8307',
        '8ce1c8b15d00efd8cfb7f6a37e6cb1228bba48bf7dba1b1718503f94c18a41cb',

        '1b399f61e57266427a5fceb4f3df6a337304832e24579c43385b59cfd660e068',
        '1b67441f080adf23da22736c557813d3bb459c915a1b84d8253b8e9599df2708',
        '1c639fbba837b57f28691e7f210a034dd1b55380a13649a64e47be55bb8308a0',
        '1d2b8e3bbfcd7546b402c2f379e40d850fd4eceaf20c45fdbfcba0b859e0a7fb',
        '1e171264f1310680b03bb9122633db660378bc411b28ae25c2bfab9f0f06da51',
        '1fcbe5d51360bee55f55c791a95df8c61f73e117bda89b9439d74df5cee7aa71',
        '2a1c7574a5c42eb8c9348d9dba505ce49f2c88231d7ea6edd3715a39a5decd94',
        '2a922ebe7edb08480baa1721ce1b5185fb5af7f64ec0f128d6a7a37711784815',
        '2b8f77719ff7528fc7147d381d98f0171390b94b85f84f9b4483e9322f140726',
        '2b672dd0e086dd4196087712ba0e34af205f518231545646c81d01411fe9bda8',
        '2d9861d0185e05d493c8d5bbae368263f15c0fa66fc7e70c9eae8bba1b43be26',
        '2d09798210455d443e62351b7b9f02fe7412930623a6bcf6b009c94da3f0fb94',
        '2debeb3bd8ee05e342aec360134d65f6f3e637145ebc001f243e21e58d8503f2',
        '2e2a40d004346e95cdb0a91dcd881be1f2ee6d9eef16f239c40f6b4e2383c656',
        '2edf7c8fd59cd5fcd19fa528f60cbd6ddb9a8076ae0280b11d8ea8eaf7d39958',
        '3a26e84b22e7665a55f0857da23a05e3ef3ed430242b6f7635909981cdbeba94',
        '3b812075fee45f45ae2d9801c25eb4cadef412b703a1df9c29060bad61fbb039',
        '3bc5906d625e95dfb4744c2baa1e1a5d1b3f73ee663cc149f02ef7eaf23986c0',
        '3ccc132059602cbf7dc3acf61a7f83d443a8379a784cc660575858bdb455e6cc',
        '3d1ac5f16b486805bfea6e9152cc60251b7e8f4a8580187afef978347e523f46',
        '3d8b868359f623a9441e336d32c360352bf819114052599d3c85ab69e60d1de9',
        '3e71f762320a9af8159d51e374a64ebd4916a92e3de3be8dc1e22d86410982c5',
        '04ffb8d60a17d6405a9408e73e9cabcdaf5e396f7c4784874dc49c353e97315b',
        '4a43f1eef4605f99278e609a8d372bc2386fb8f63ba6999e3ff5c3b80142a6f9',
        '4a495b476cc33e6be712a77184626725ec10e3f31b89d3c53010bd620bcd0cbb',
        '4d42711b63f90ff9af3d6c8e4edb3ff08cab6fe5131d9a43f4d10d1ca51f7378',
        '4df54b01e012216c2c376c7f4a2bee56c0dfead5bd9324e69d774274151c9a1c',
        '4e3b3bf5ee097fdbf0b595a37261eb70683a3c59e15e6aa616e313a7134a48ea',
        '4ea6fb35bfa0deace0e149557d73a99ee858029e33bbbcaf5cdf5aefb21ffb80',
        '4ec1e44407cc7874b875e2850962e0583a97486b29578cdd4bcc21d7e1d76004',
        '4ef9eb58224457492f674fb550761cd13b7e6031186b801577194a05719d4f43',
        '05c73c13c3635fab5c7daa5bcae4ea3a21ec0bd620291762cd13c03cd786b438',
        '5a0f4fa2c578675590ac317e392f78abfc19577a7f8c964e708a1ad436e58a37',
        '5a63c01f80e137c588117dec2a9ae121d27b8a57ec40ab77e7e5a94a75be2db2',
        '5a071e20a23c845332e288fe02f2601518c8f1c1de1871d24a0530b09841157f',
        '5b3bb26ce3cc45e3f9317075e2018d429ca2d0203bd6c41eda16da34bc0b8ccd',
        '5b231372f1e52b49526215deebcfc997b9dd74d77cc35d9cf78590480e51b1a0',
        '5c1af46c7300e87a73dacf6cf41ce397e3f05df6bd9c7e227b4ac59f85769160',
        '5d62d79f6555d7a7edaf3b175312b326df779f9ae8c893e2182e4159f44c9d34',
        '5e815f1124d3279bf4d593ecdf73f4d8e7cabc26e7dbf1148a5f3ed529531827',
        '5e405415dc1a7d3c56e7e8d8b9b744ac3c2a275ee5f4b09bc09d63d6f7546e28',
        '5f435219d06e44d63e9d5b7a234afe3ef384c94fc997b9cbd2f051742d69c790',
        '5fd41a27b02e9e2c90fd4d98aeae32d41cd24d5efe80ec918c7ad7cc2514386f',
        '5fea3241e2e2c3232f3dafa3bf72c9ba0e88df2781f2a742d4369813f99ce952',
        '6b8d1a1f785c103e2d75702c22491d1b3942878bcba7965c9f6b2ec46440726d',
        '6c29fa22f01232ee015ac027338ce7b69745844fae51d7cde0916acd371f3bfc',
        '6df774a7ed523b867cb9bcc2f56d95db134f8f668c5c7dfc6843665ce2e966b9',
        '6e4849e0d92ae82380bf4bb6773a1ff27863038838a021ccade723e2adab5d73',
        '6ee4dca852ae3b8f2fa3dba67bf58ea089d1ad5af0946dad3350339877cb7f29',
        '7a8cc5e06b39affec26b3f1bcaae3fae4a3c35aac0d2b5d0ae0509e9d1f06090',
        '7ab4a27812e54a0a4ab0a952707f4e185eefe67c5466e9c47d578056e5dfcdda',
        '0be00b72a65e558aa92a4f197663f3496b2a3ceaa5f77bafe309727141ad77af',
        '0bf9cfc88d56b52982655b56d577f69d2ee4b136908684015001c52c64f0a84b',
        '0c1134c20c7f2a20eeda30f998c5e70336e56fa1fde05434028d97f3eeb31c33',
        '0d8d47b0b0bf9291e01f426782ba721d5be30ea9b2547f315c7ca48c367b2aa9',
        '0e69c9e8e2447ea2c355e3daa30c1697427fe40748a0daabf2d996ab254e89cf',
        '0e73886d15f788471581cbf3864703206fd96eb79e4683ffa332463507fdcda4',
        '0fbcedf08d9e262137afba702687b2de15822149e4a282b9249907134e5ef151',
        '0fe87602f6f2a6dd5acf209eea81ec0555fe1e02d6f781299724238b4cb2e2c1',
        '0ff0a7429ebd5f19eac9fef4504d12c2b2b66a2b060de1c25d6e8fd08262f6d9',
    ]
    auth_key: str = "API_KEY"
    output_file: str = "yara_matches.csv"
    process_hashes(auth_key, hash_list, output_file)


if __name__ == "__main__":
    main()

import json
from typing import Dict, List, override
from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.ModulesData import ModulesData
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.ModulesSummary import ModulesSummary


class ModulesStrategy(AnalysisStrategy[ModulesData, ModulesSummary]):
    """
    The `modules` plugin enumerates the loaded modules in memory, providing details about
    their base address, file path, size, etc.
    This information is useful for detecting malicious or unusual modules loaded in memory.

    Generic Parameters:
    - ModulesData: The data model that represents individual module information.
    - ModulesSummary: The summary model containing aggregated analysis results.
    """

    @override
    def get_command(self) -> Dict[OperatingSystem, str]:
        return {OperatingSystem.WINDOWS: 'windows.modules'}

    @override
    def analyze_output(self, file_path: str = None) -> None:
        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: List[Dict[str, any]] = json.load(file)  # Attempt to load content as JSON

            self.analyzer_output: List[ModulesData] = self.parse_modules_data(data)
            self.analyzer_summary: ModulesSummary = self.summarize_modules_data()

        except json.JSONDecodeError as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output: List[ModulesData] = []
            self.analyzer_summary: ModulesSummary = ModulesSummary(modules_nmodules=0)

    @staticmethod
    def parse_modules_data(data: List[Dict[str, any]]) -> List[ModulesData]:
        """
        Parse the JSON output to create a list of ModulesData instances.
        """

        def parse(data_item: Dict[str, any]) -> ModulesData:
            children: List[ModulesData] = [parse(child) for child in data_item.get('__children', [])]

            return ModulesData(
                Base=data_item.get('Base', 0),
                File_output=data_item.get('File output', ''),
                Name=data_item.get('Name', ''),
                Offset=data_item.get('Offset', 0),
                Path=data_item.get('Path', ''),
                Size=data_item.get('Size', 0),
                children=children
            )

        return [parse(item) for item in data]

    def summarize_modules_data(self) -> ModulesSummary:
        """
        Summarizes the module data, specifically counting the total number of modules.

        Returns:
            ModulesSummary: The summary containing the total number of modules.
        """
        # Count the total number of modules
        total_modules: int = len(self.analyzer_output)

        # Return a ModulesSummary object with the count
        return ModulesSummary(modules_nmodules=total_modules)

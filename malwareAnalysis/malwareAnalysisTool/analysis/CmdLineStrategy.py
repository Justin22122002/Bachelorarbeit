import json
from typing_extensions import override

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.CmdLineData import CmdLineData


class CmdLineStrategy(AnalysisStrategy[CmdLineData, None]):
    """
    A strategy for analyzing command-line arguments of running processes.

    This strategy operates on `CmdLineData` and does not produce a summary.
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        """
        Returns the Volatility command required for extracting command-line arguments.
        """
        return {OperatingSystem.WINDOWS: 'windows.cmdline'}

    @override
    def analyze_output(self, file_path: str | None = None) -> None:
        """
        Parses the output JSON file and extracts command-line arguments.
        """
        path_to_use: str = file_path if file_path else self.get_file_path()

        with open(path_to_use, 'r') as file:
            data: list[dict] = json.load(file)

        processes: list[CmdLineData] = self.parse_process_data(data)
        print(processes)

    @staticmethod
    def parse_process_data(data: list[dict]) -> list[CmdLineData]:
        """
        Parses the JSON output to create a list of CmdLineData instances.
        """
        def parse(data_item: dict) -> CmdLineData:
            children: list[CmdLineData] = [parse(child) for child in data_item.get('__children', [])]
            return CmdLineData(
                Args=data_item['Args'],
                PID=data_item['PID'],
                Process=data_item['Process'],
                children=children
            )

        return [parse(item) for item in data]

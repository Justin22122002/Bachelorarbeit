import json
from typing import override

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.PsScanData import PsScanData


class PsScanStrategy(AnalysisStrategy[PsScanData, None]):
    """
    The `psscan` plugin scans the physical memory for process structures (Eprocess objects)
    to find processes, including those that may have been removed from the standard process list
    of the operating system (e.g., through malware manipulation).

    This class provides methods to execute the `psscan` command and analyze the results,
    which are provided in JSON format. The processes and their metadata are stored in a list
    of `PsScanData` objects.

    Generic parameters:
        - TData: PsScanData
        - TSummary: None
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        return {OperatingSystem.WINDOWS: 'windows.psscan'}

    @override
    def analyze_output(self, file_path: str = None) -> None:
        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: list[dict] = json.load(file)  # Versuch, den Inhalt als JSON zu laden

            self.analyzer_output: list[PsScanData] = self.parse_process_data(data)

        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output: list[PsScanData] = []

    @staticmethod
    def parse_process_data(data: list[dict]) -> list[PsScanData]:
        def parse(data_item: dict) -> PsScanData:
            children: list[PsScanData] = [parse(child) for child in data_item.get('__children', [])]
            return PsScanData(
                CreateTime=data_item['CreateTime'],
                ExitTime=data_item.get('ExitTime'),  # Can be None
                File_output=data_item['File output'],
                Handles=data_item.get('Handles'),  # Can be None
                ImageFileName=data_item['ImageFileName'],
                Offset=data_item['Offset(V)'],
                PID=data_item['PID'],
                PPID=data_item['PPID'],
                SessionId=data_item.get('SessionId'),  # Can be None
                Threads=data_item['Threads'],
                Wow64=data_item['Wow64'],
                children=children
            )

        return [parse(item) for item in data]
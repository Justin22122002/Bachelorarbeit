import json
from typing import override
from statistics import mean

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.PsListData import PsListData
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.PsListSummary import PsListSummary


class PsListStrategy(AnalysisStrategy[PsListData, PsListSummary]):
    """
    The `pslist` plugin provides a detailed list of processes, including their
    corresponding process IDs, parent process IDs, and other key attributes useful
    for forensic analysis.

    Generic parameters:
        - TData: PsListData
        - TSummary: PsListSummary
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        return {OperatingSystem.WINDOWS: 'windows.pslist'}

    @override
    def analyze_output(self, file_path: str = None) -> None:
        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: list[dict] = json.load(file)

            self.analyzer_output: list[PsListData] = self.parse_process_data(data)
            self.analyzer_summary: PsListSummary = self.summarize_process_data()

        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output: list[PsListData] = []
            self.analyzer_summary: PsListSummary = PsListSummary(
                nproc=0,
                nppid=0,
                avg_threads=0.0,
                nprocs64bit=0,
                avg_handlers=0.0
            )

    @staticmethod
    def parse_process_data(data: list[dict]) -> list[PsListData]:
        def parse(data_item: dict) -> PsListData:
            children: list[PsListData] = [parse(child) for child in data_item.get('__children', [])]

            return PsListData(
                CreateTime=data_item['CreateTime'],
                ExitTime=data_item.get('ExitTime'),  # Can be None
                File_output=data_item['File output'],
                Handles=data_item.get('Handles'),  # Can be None
                ImageFileName=data_item['ImageFileName'],
                Offset=data_item['Offset(V)'],
                PID=data_item['PID'],
                PPID=data_item['PPID'],
                SessionId=data_item.get('SessionId'),  # Can be None
                Threads=data_item['Threads'],
                Wow64=data_item['Wow64'],
                children=children
            )

        return [parse(item) for item in data]

    def summarize_process_data(self) -> PsListSummary:
        """
        Summarize key metrics for processes: total number of processes, average number of threads,
        total number of 64-bit processes, and average handles.

        Returns:
            PsListSummary: A summary object containing the following metrics:
                - nproc (int): Total number of processes.
                - nppid (int): Total number of unique parent process IDs (PPIDs).
                - avg_threads (float): Average number of threads across all processes.
                - nprocs64bit (int): Total number of 64-bit processes (Wow64=False).
                - avg_handlers (float): Average number of handlers across processes, if available.
        """

        # Total number of processes
        total_procs: int = len(self.analyzer_output)

        # Total unique parent process IDs (PPIDs)
        unique_ppids: int = len(set(proc.PPID for proc in self.analyzer_output))

        # Average number of threads per process
        avg_threads: float = mean(proc.Threads for proc in self.analyzer_output)

        # Total number of 64-bit processes (Wow64=False indicates 64-bit)
        nprocs64bit: int = len([proc for proc in self.analyzer_output if not proc.Wow64])

        # Average number of handlers (if available)
        procs_with_handles: int = [proc for proc in self.analyzer_output if proc.Handles is not None]
        avg_handles: float = mean(proc.Handles for proc in procs_with_handles) if procs_with_handles else 0.0

        return PsListSummary(
            nproc=total_procs,
            nppid=unique_ppids,
            avg_threads=avg_threads,
            nprocs64bit=nprocs64bit,
            avg_handlers=avg_handles
        )

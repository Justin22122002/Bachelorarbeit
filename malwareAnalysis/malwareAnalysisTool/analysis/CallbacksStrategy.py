import json
from typing_extensions import override

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.CallbacksData import CallbacksData
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.CallbacksSummary import CallbacksSummary


class CallbacksStrategy(AnalysisStrategy[CallbacksData, CallbacksSummary]):
    """
    A strategy for analyzing callback-related data.

    This strategy operates on `CallbacksData` and produces a summary of type `CallbacksSummary`.
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        """
        Returns the Volatility command required for callback analysis.
        """
        return {OperatingSystem.WINDOWS: 'windows.callbacks'}

    @override
    def analyze_output(self, file_path: str | None = None) -> None:
        """
        Parses the output JSON file and extracts callback-related data.
        """
        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: list[dict] = json.load(file)

            self.analyzer_output: list[CallbacksData] = self.parse_callbacks_data(data)
            self.analyzer_summary: CallbacksSummary = self.summarize_callbacks_data()

        except json.JSONDecodeError as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output = []
            self.analyzer_summary = CallbacksSummary(
                callbacks_ncallbacks=0,
                callbacks_nanonymous=0,
                callbacks_ngeneric=0
            )

    @staticmethod
    def parse_callbacks_data(data: list[dict]) -> list[CallbacksData]:
        """
        Parse the JSON output to create a list of CallbacksData instances.
        """
        def parse(data_item: dict) -> CallbacksData:
            children: list[CallbacksData] = [parse(child) for child in data_item.get('__children', [])]

            return CallbacksData(
                Callback=data_item.get('Callback', 0),
                Detail=data_item.get('Detail'),
                Module=data_item.get('Module', ''),
                Symbol=data_item.get('Symbol'),
                Type=data_item.get('Type', ''),
                children=children
            )

        return [parse(item) for item in data]

    def summarize_callbacks_data(self) -> CallbacksSummary:
        """
        Summarize the parsed callback data into a CallbacksSummary.
        """
        total_callbacks: int = 0
        anonymous_callbacks: int = 0
        generic_callbacks: int = 0

        # Traverse all the parsed callback data
        for callback in self.analyzer_output:
            total_callbacks += 1
            if callback.Type in {'KeBugCheckCallbackListHead', 'CmRegisterCallback', 'KeBugCheckReasonCallbackListHead',
                                 'PspLoadImageNotifyRoutine', 'PspCreateProcessNotifyRoutine', 'PspCreateThreadNotifyRoutine'}:
                anonymous_callbacks += 1
            elif callback.Type == 'GenericKernelCallback':
                generic_callbacks += 1

        return CallbacksSummary(
            callbacks_ncallbacks=total_callbacks,
            callbacks_nanonymous=anonymous_callbacks,
            callbacks_ngeneric=generic_callbacks
        )

import json
from typing_extensions import override

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.MalfindData import MalfindData
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.MalfindSummary import MalfindSummary


class MalfindStrategy(AnalysisStrategy[MalfindData, MalfindSummary]):
    """
    A strategy for analyzing suspicious memory modifications in system processes.

    This strategy operates on `MalfindData` and produces a summary of type `MalfindSummary`.
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        """
        Returns the Volatility command required for extracting suspicious memory modifications.
        """
        return {OperatingSystem.WINDOWS: 'windows.malfind'}

    @override
    def analyze_output(self, file_path: str | None = None) -> None:
        """
        Parses the output JSON file and extracts suspicious memory modification data.
        """
        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: list[dict] = json.load(file)

            self.analyzer_output: list[MalfindData] = self.parse_malfind_data(data)
            self.analyzer_summary: MalfindSummary = self.summarize_malfind_data()

        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output = []
            self.analyzer_summary = MalfindSummary(
                ninjections=0,
                total_commit_charge=0,
                protections=0,
                unique_injections=0
            )

    @staticmethod
    def parse_malfind_data(data: list[dict]) -> list[MalfindData]:
        """
        Parses the JSON output to create a list of MalfindData instances.
        """
        def parse(data_item: dict) -> MalfindData:
            children: list[MalfindData] = [parse(child) for child in data_item.get('__children', [])]

            return MalfindData(
                CommitCharge=data_item['CommitCharge'],
                Disasm=data_item['Disasm'],
                EndVPN=data_item['End VPN'],
                File_output=data_item['File output'],
                Hexdump=data_item['Hexdump'],
                Notes=data_item.get('Notes'),  # Can be None
                PID=data_item['PID'],
                PrivateMemory=data_item['PrivateMemory'],
                Process=data_item['Process'],
                Protection=data_item['Protection'],
                StartVPN=data_item['Start VPN'],
                Tag=data_item['Tag'],
                children=children  # Recursively adding children if present
            )

        return [parse(item) for item in data]

    def summarize_malfind_data(self) -> MalfindSummary:
        """
        Summarizes key metrics for suspicious memory modifications.
        """
        ninjections: int = len(self.analyzer_output)

        # Sum up the total Commit Charge across all processes
        total_commit_charge: int = sum(proc.CommitCharge for proc in self.analyzer_output)

        protections: int = 0

        for proc in self.analyzer_output:
            if proc.Protection == "PAGE_EXECUTE_READWRITE":  #Number of injections with all permissions
                protections += 1

        # Determine the unique types of memory protection used
        unique_protections: int = len(set(proc.PID for proc in self.analyzer_output))

        # Return a summary object with the calculated metrics
        return MalfindSummary(
            ninjections=ninjections,
            total_commit_charge=total_commit_charge,
            protections=protections,
            unique_injections=unique_protections
        )

import json
from collections import Counter
from typing import override

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.NetscanData import NetscanData
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.NetscanSummary import NetscanSummary


class NetScanStrategy(AnalysisStrategy[NetscanData, NetscanSummary]):
    """
    The netscan plugin analyzes the memory of a system to identify active network
    connections and their associated attributes, such as local and foreign addresses,
    ports, and process IDs. This information can be crucial for understanding network
    activity and detecting potential malicious behavior.

    Generic parameters:
        - TData: NetscanData
        - TSummary: NetscanSummary
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        return {OperatingSystem.WINDOWS: 'windows.netscan'}

    @override
    def analyze_output(self, file_path: str = None) -> None:
        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: list[dict] = json.load(file)  # Versuch, den Inhalt als JSON zu laden

            self.analyzer_output: list[NetscanData] = self.parse_network_connections(data)
            self.analyzer_summary: NetscanSummary = self.summarize_network_connections()

        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output: list[NetscanData] = []
            self.analyzer_summary: NetscanSummary = NetscanSummary(
                nConn=0,
                nDistinctForeignAdd=0,
                nDistinctForeignPort=0,
                nDistinctLocalAddr=0,
                nDistinctLocalPort=0,
                nOwners=0,
                nDistinctProc=0,
                nListening=0,
                Proto_TCPv4=0,
                Proto_TCPv6=0,
                Proto_UDPv4=0,
                Proto_UDPv6=0
            )

    @staticmethod
    def parse_network_connections(data: list[dict]) -> list[NetscanData]:
        def parse(data_item: dict) -> NetscanData:
            children: list[NetscanData] = [parse(child) for child in data_item.get('__children', [])]
            return NetscanData(
                Created=data_item['Created'],
                ForeignAddr=data_item['ForeignAddr'],
                ForeignPort=data_item['ForeignPort'],
                LocalAddr=data_item['LocalAddr'],
                LocalPort=data_item['LocalPort'],
                Offset=data_item['Offset'],
                Owner=data_item['Owner'],
                PID=data_item['PID'],
                Proto=data_item['Proto'],
                State=data_item['State'],
                children=children
            )

        return [parse(item) for item in data]

    def summarize_network_connections(self) -> NetscanSummary:
        """
        Summarize key metrics for network connections without Pandas by directly
        operating on the list of NetscanData objects.

        Returns:
            NetscanSummary: The summarized network metrics.
        """
        data: list[NetscanData] = self.analyzer_output

        n_conn: int = len(data)
        foreign_addrs: set[str] = set()
        foreign_ports: set[int] = set()
        local_addrs: set[str] = set()
        local_ports: set[int] = set()
        owners: set[str] = set()
        pids: set[int] = set()
        n_listening: int = 0
        proto_counts: Counter = Counter()

        for entry in data:
            foreign_addrs.add(entry.ForeignAddr)
            foreign_ports.add(entry.ForeignPort)
            local_addrs.add(entry.LocalAddr)
            local_ports.add(entry.LocalPort)
            owners.add(entry.Owner)
            pids.add(entry.PID)

            if entry.State == 'LISTENING':
                n_listening += 1

            proto_counts[entry.Proto] += 1

        return NetscanSummary(
            nConn=n_conn,
            nDistinctForeignAdd=len(foreign_addrs),
            nDistinctForeignPort=len(foreign_ports),
            nDistinctLocalAddr=len(local_addrs),
            nDistinctLocalPort=len(local_ports),
            nOwners=len(owners),
            nDistinctProc=len(pids),
            nListening=n_listening,
            Proto_TCPv4=proto_counts['TCPv4'],
            Proto_TCPv6=proto_counts['TCPv6'],
            Proto_UDPv4=proto_counts['UDPv4'],
            Proto_UDPv6=proto_counts['UDPv6']
        )
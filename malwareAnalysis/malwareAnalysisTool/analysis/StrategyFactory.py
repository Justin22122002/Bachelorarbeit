from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.AnalyzerOptions import AnalyzerOptions
from malwareAnalysis.malwareAnalysisTool.analysis.CallbacksStrategy import CallbacksStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.DllListStrategy import DllListStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.HandlesStrategy import HandlesStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.LdrModulesStrategy import LdrModulesStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.MalfindStrategy import MalfindStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.ModulesStrategy import ModulesStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsListStrategy import PsListStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsxViewStrategy import PsxViewStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.SvcScanStrategy import SvcScanStrategy

class StrategyFactory:
    """Factory class to create analysis strategies."""

    @staticmethod
    def create_strategies(options: AnalyzerOptions) -> list[AnalysisStrategy]:
        """Creates and returns a list of strategies for the analyzer."""
        return [
            PsListStrategy(options),
            DllListStrategy(options),
            HandlesStrategy(options),
            LdrModulesStrategy(options),
            MalfindStrategy(options),
            PsxViewStrategy(options),
            ModulesStrategy(options),
            SvcScanStrategy(options),
            CallbacksStrategy(options)
            # Additional strategies can be added here if required

            # Not in use
            # ImageInfoStrategy(options),
            # CmdLineStrategy(options),
            # PsScanStrategy(options),
            # NetScanStrategy(options),
            # PsTreeStrategy(options),
        ]
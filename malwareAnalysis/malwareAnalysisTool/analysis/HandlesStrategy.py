import json
from typing_extensions import override
from statistics import mean

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.HandlesData import HandlesData
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.HandlesSummary import HandlesSummary


class HandlesStrategy(AnalysisStrategy[HandlesData, HandlesSummary]):
    """
    A strategy for analyzing process handles in system memory.

    This strategy operates on `HandlesData` and produces a summary of type `HandlesSummary`.
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        """
        Returns the Volatility command required for extracting handle information.
        """
        return {OperatingSystem.WINDOWS: 'windows.handles'}

    @override
    def analyze_output(self, file_path: str | None = None) -> None:
        """
        Parses the output JSON file and extracts handle-related data.
        """
        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: list[dict] = json.load(file)

            self.analyzer_output: list[HandlesData] = self.parse_handles_data(data)
            self.analyzer_summary: HandlesSummary = self.summarize_handles_data()

        except json.JSONDecodeError as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output = []
            self.analyzer_summary = HandlesSummary(
                nhandles=0,
                avg_handles_per_proc=0.0,
                nport=0,
                nfile=0,
                nevent=0,
                ndesktop=0,
                nkey=0,
                nthread=0,
                ndirectory=0,
                nsemaphore=0,
                ntimer=0,
                nsection=0,
                nmutant=0
            )

    @staticmethod
    def parse_handles_data(data: list[dict]) -> list[HandlesData]:
        """
        Parses the JSON output to create a list of HandlesData instances.
        """
        def parse(data_item: dict) -> HandlesData:
            children: list[HandlesData] = [parse(child) for child in data_item.get('__children', [])]

            return HandlesData(
                granted_access=data_item.get('GrantedAccess', 0),
                handle_value=data_item.get('HandleValue', 0),
                name=data_item.get('Name', ''),
                offset=data_item.get('Offset', 0),
                pid=data_item.get('PID', 0),
                process=data_item.get('Process', ''),
                type=data_item.get('Type', ''),
                children=children
            )

        return [parse(item) for item in data]

    def summarize_handles_data(self) -> HandlesSummary:
        """
        Summarizes the handle-related data metrics:
        - Total number of handles (nhandles).
        - Average number of handles per process (avg_handles_per_proc).
        - Counts of specific handle types to detect anomalies.
        """
        total_handles: int = len(self.analyzer_output)  # Each entry in analyzer_output is a handle
        total_processes: int = len(set(handle.pid for handle in self.analyzer_output))  # Unique process IDs

        avg_handles_per_proc: float = (total_handles / total_processes) if total_processes else 0

        # Initialize counters for specific handle types
        handle_type_counters = {
            "Port": 0,
            "File": 0,
            "Event": 0,
            "Desktop": 0,
            "Key": 0,
            "Thread": 0,
            "Directory": 0,
            "Semaphore": 0,
            "Timer": 0,
            "Section": 0,
            "Mutant": 0,
        }

        # Aggregate handle counts based on type
        for handle in self.analyzer_output:
            if handle.type in handle_type_counters:
                handle_type_counters[handle.type] += 1

        return HandlesSummary(
            nhandles=total_handles,
            avg_handles_per_proc=avg_handles_per_proc,
            nport=handle_type_counters["Port"],
            nfile=handle_type_counters["File"],
            nevent=handle_type_counters["Event"],
            ndesktop=handle_type_counters["Desktop"],
            nkey=handle_type_counters["Key"],
            nthread=handle_type_counters["Thread"],
            ndirectory=handle_type_counters["Directory"],
            nsemaphore=handle_type_counters["Semaphore"],
            ntimer=handle_type_counters["Timer"],
            nsection=handle_type_counters["Section"],
            nmutant=handle_type_counters["Mutant"]
        )
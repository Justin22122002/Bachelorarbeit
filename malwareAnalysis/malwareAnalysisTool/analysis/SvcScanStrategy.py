import json
from typing import override

from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.SvcScanData import SvcScanData
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.SvcScanSummary import SvcScanSummary


class SvcScanStrategy(AnalysisStrategy[SvcScanData, SvcScanSummary]):
    """
    The `svcscan` plugin processes and summarizes information about Windows services.
    """

    @override
    def get_command(self) -> dict[OperatingSystem, str]:
        return {OperatingSystem.WINDOWS: 'windows.svcscan'}

    @override
    def analyze_output(self, file_path: str = None) -> None:
        """
        Analyze the output of the `svcscan` plugin.
        """

        path_to_use: str = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data: list[dict] = json.load(file)  # Versuch, den Inhalt als JSON zu laden

            self.analyzer_output: list[SvcScanData] = self.parse_service_data(data)
            self.analyzer_summary: SvcScanSummary = self.summarize_service_data()

        except json.JSONDecodeError as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output = []
            self.analyzer_summary = SvcScanSummary(
                svcscan_nservices=0,
                svcscan_kernel_drivers=0,
                svcscan_fs_drivers=0,
                svcscan_process_services=0,
                svcscan_shared_process_services=0,
                svcscan_interactive_process_services=0,
                svcscan_nactive=0
            )

    @staticmethod
    def parse_service_data(data: list[dict]) -> list[SvcScanData]:
        """
        Parse the JSON data into a list of SvcScanData objects.

        Args:
            data (list[dict]): JSON data representing services and their attributes.

        Returns:
            list[SvcScanData]: Parsed list of service data.
        """
        def parse(data_item: dict) -> SvcScanData:
            children: list[SvcScanData] = [parse(child) for child in data_item.get('__children', [])]

            return SvcScanData(
                Binary=data_item.get('Binary'),
                Binary_Registry=data_item.get('Binary (Registry)'),
                Display=data_item.get('Display'),
                Dll=data_item.get('Dll'),
                Name=data_item.get('Name'),
                Offset=data_item.get('Offset'),
                Order=data_item.get('Order'),
                PID=data_item.get('PID'),
                Start=data_item.get('Start'),
                State=data_item.get('State'),
                Type=data_item.get('Type'),
                children=children
            )

        return [parse(item) for item in data]

    def summarize_service_data(self) -> SvcScanSummary:
        """
        Summarize key metrics for services: total services, counts of specific service types,
        and active services.
        """
        # Total number of services
        total_services: int = len(self.analyzer_output)

        # Counts of specific service types
        kernel_drivers: int = sum(1 for service in self.analyzer_output if service.Type == "SERVICE_KERNEL_DRIVER")
        fs_drivers: int = sum(1 for service in self.analyzer_output if service.Type == "SERVICE_FILE_SYSTEM_DRIVER")
        process_services: int = sum(1 for service in self.analyzer_output if service.Type == "SERVICE_WIN32_OWN_PROCESS")
        shared_process_services: int = sum(1 for service in self.analyzer_output if service.Type == "SERVICE_WIN32_SHARE_PROCESS|SERVICE_INTERACTIVE_PROCESS")
        interactive_process_services: int = sum(
            1 for service in self.analyzer_output if service.Type == "SERVICE_WIN32_OWN_PROCESS|SERVICE_INTERACTIVE_PROCESS")

        # Total number of active services
        active_services: int = sum(1 for service in self.analyzer_output if service.State == "SERVICE_RUNNING")

        return SvcScanSummary(
            svcscan_nservices=total_services,
            svcscan_kernel_drivers=kernel_drivers,
            svcscan_fs_drivers=fs_drivers,
            svcscan_process_services=process_services,
            svcscan_shared_process_services=shared_process_services,
            svcscan_interactive_process_services=interactive_process_services,
            svcscan_nactive=active_services
        )
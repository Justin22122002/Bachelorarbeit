import pandas as pd


class CsvDatasetLabeler:
    """
    A class for reading a CSV file and adding labels based on the Raw_Type.
    Labels:
      - Label: 'Benign' or 'Malware'
      - SubType: Detailed type ('Benign', 'Spyware', 'Trojan', 'Ransomware')
    """

    @staticmethod
    def process_csv(file_path: str, output_path: str) -> None:
        """
        Reads a CSV file, adds labels, and saves the updated file.

        Args:
            file_path (str): Path to the input file.
            output_path (str): Path to the output file.
        """
        try:
            df: pd.DataFrame = pd.read_csv(file_path)

            if 'Raw_Type' not in df.columns:
                raise ValueError("The column 'Raw_Type' is missing in the file.")

            df['Label']: pd.Series = df['Raw_Type'].apply(lambda x: 'Benign' if 'benign' in x.lower() else 'Malware')
            df['SubType']: pd.Series = df['Raw_Type'].apply(lambda x: CsvDatasetLabeler.extract_subtype(x))

            df.to_csv(output_path, index=False)
            print(f"The file has been successfully processed and saved at '{output_path}'.")

        except Exception as e:
            print(f"Error processing the file: {e}")

    @staticmethod
    def extract_subtype(raw_type: str) -> 'Benign' | 'Spyware' | 'Trojan' | 'Ransomware' | 'Unknown':
        """
        Extracts the SubType from Raw_Type, which contains the file path.

        Args:
            raw_type (str): The Raw_Type string containing the file path.

        Returns:
            str: The SubType (e.g., Benign, Spyware, Trojan, Ransomware, Unknown).
        """
        file_name: str = raw_type.lower().split("\\")[-1]  # Extracting the last part of the path

        if 'benign' in file_name:
            return 'Benign'
        elif 'spyware' in file_name:
            return 'Spyware'
        elif 'trojan' in file_name:
            return 'Trojan'
        elif 'ransomware' in file_name:
            return 'Ransomware'
        else:
            return 'Unknown'

import pandas as pd
import re
import vt

class VirusTotalClient:
    def __init__(self, api_key: str, output_file: str) -> None:
        """Initialize the VirusTotal client with an API key and an output file."""
        self.api_key: str = api_key
        self.output_file: str = output_file

        # Initialize the CSV file
        with open(self.output_file, 'w') as f:
            f.write('Raw_Type,Label,SubType,Malicious,Total_Scans,VT_Result\n')

    def clean_raw_type(self, raw_type: str) -> str:
        """Clean the Raw_Type field."""
        pattern: str = r"^(F:\\Run_1\\)?(.*?)(_ransomware|_trojan|_benign|_spyware)(/raw/raw_\d\.bin)?$"
        return re.sub(pattern, r"\2", raw_type)

    def fetch_file_report(self, file_hash: str) -> dict | None:
        """Retrieve information about a file using its hash."""
        with vt.Client(self.api_key) as client:
            try:
                file_report = client.get_object(f"/files/{file_hash}")
                if file_report and file_report.last_analysis_stats:
                    return {
                        "malicious": file_report.last_analysis_stats.get('malicious', 0),
                        "total": file_report.last_analysis_stats.get('total', 0)
                    }
                return None
            except vt.error.APIError as e:
                print(f"Error: {e}")
                return None
            except Exception as e:
                print(f"Unexpected error: {e}")
                return None

    def process_and_save(self, raw_type: str, label: str, subtype: str) -> None:
        """Query the file hash, process the result, and save it to a CSV file."""
        print(f"Querying hash: {raw_type}")
        file_report: dict | None = self.fetch_file_report(raw_type)

        if file_report:
            malicious: int = file_report.get('malicious', 0)
            total: int = file_report.get('total', 0)
            vt_result: str = "MALICIOUS" if malicious > 0 else "NOT MALICIOUS"
        else:
            malicious: int | None = None
            total: int | None = None
            vt_result: str = "UNKNOWN"

        result_row: dict[str, str] = {
            "Raw_Type": raw_type,
            "Label": label,
            "SubType": subtype,
            "Malicious": malicious,
            "Total_Scans": total,
            "VT_Result": vt_result
        }
        print("RESULT_ROW")
        print(result_row)

        # Save the result to the CSV file
        pd.DataFrame([result_row]).to_csv(self.output_file, mode='a', index=False, header=False)
        print(f"Result for {raw_type} has been saved.")
import os
from collections import defaultdict

from malwareAnalysis.hwOutputParser.dynamic_analysis.DynamicAnalysis import DynamicAnalysis
from malwareAnalysis.malwareAnalysisTool.analysis.models.result.Summary import Summary
from malwareAnalysis.malwareAnalysisTool.csv.CsvAnalysisHandler import CsvAnalysisHandler


def get_directories_with_suffix_map(base_dir: str, suffixes: list[str]) -> dict[str, list[str]]:
    """
    Returns a dictionary mapping each suffix to a list of directories within the
    given base directory whose names end with that suffix.
    """
    matching_dirs_map: dict[str, list[str]] = defaultdict(list)

    for root, dirs, files in os.walk(base_dir):
        for dir_name in dirs:
            for suffix in suffixes:
                if dir_name.endswith(suffix):
                    matching_dirs_map[suffix].append(dir_name)  # Only add the directory name, not the full path
                    break

    return dict(matching_dirs_map)


def main() -> None:
    """
    Main function to execute dynamic analysis on malware datasets.
    """
    print("Start Analysis")

    base_dir: str = "F:/Run_1"
    suffixes: list[str] = ["_spyware", "_ransomware", "_trojan", "_benign"]
    matching_dirs_map: dict[str, list[str]] = get_directories_with_suffix_map(base_dir, suffixes)

    is_header_written: bool = False

    for suffix, directories in matching_dirs_map.items():
        print(f"\nSuffix '{suffix}':")
        for dir_path in directories:

            directory: str = dir_path
            file_and_registry_directory: str = "data_integrity_report"

            # Dynamic analysis
            analyzed_folder: str = "analysed"
            files: dict[str, str] = {
                "malfind": "windows.malfind.Malfind_compared.json",
                "pstree": "windows.pstree_compared.json",
                "pslist": "windows.pslist_compared.json",
                "psscan": "windows.psscan_compared.json",
                "netscan": "windows.netscan_compared.json",
                "registry": "filtered_differences_registry_file_hashes.json",
                "file": "filtered_differences_userdata_file_hashes.json",
            }

            dynamic_analysis: DynamicAnalysis = DynamicAnalysis(base_dir, directory, analyzed_folder)

            malfind_strategy = dynamic_analysis.process_malfind_strategy(files["malfind"])
            pstree_strategy = dynamic_analysis.process_pstree_strategy(files["pstree"])
            pslist_strategy = dynamic_analysis.process_pslist_strategy(files["pslist"])
            psscan_strategy = dynamic_analysis.process_psscan_strategy(files["psscan"])
            netscan_strategy = dynamic_analysis.process_netscan_strategy(files["netscan"])

            dynamic_analysis.analyzed_folder = file_and_registry_directory

            file_changes_strategy = dynamic_analysis.process_user_file_changes_strategy(files["registry"])
            registry_changes_strategy = dynamic_analysis.process_registry_changes_strategy(files["file"])

            summaries: list[Summary] = [
                malfind_strategy.analyzer_summary,
                pstree_strategy.analyzer_summary,
                pslist_strategy.analyzer_summary,
                netscan_strategy.analyzer_summary,
                file_changes_strategy.analyzer_summary,
                registry_changes_strategy.analyzer_summary,
            ]

            output_csv: str = "output_file_Run_1_HW.csv"
            csv_handler: CsvAnalysisHandler = CsvAnalysisHandler(output_csv, dir_path)

            if not is_header_written:
                csv_handler.write_header(summaries)
                is_header_written = True

            csv_handler.append_data(summaries)

            print(f"Processed {dir_path}")

    # TODO: Implement PCAP file analysis


if __name__ == '__main__':
    main()

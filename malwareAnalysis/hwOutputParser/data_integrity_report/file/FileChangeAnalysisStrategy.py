import json

from malwareAnalysis.hwOutputParser.data_integrity_report.Status import Status
from malwareAnalysis.hwOutputParser.data_integrity_report.file.FileChangeData import FileChangeData
from malwareAnalysis.hwOutputParser.data_integrity_report.file.FileChangeSummary import FileChangeSummary
from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem


class FileChangeAnalysisStrategy(AnalysisStrategy[FileChangeData, FileChangeSummary]):

    def get_command(self) -> dict[OperatingSystem, str]:
        return {}

    def analyze_output(self, file_path: str = None) -> None:
        path_to_use = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data = json.load(file)  # Versuch, den Inhalt als JSON zu laden

            self.analyzer_output = self.parse_file_changes(data)
            self.analyzer_summary = self.summarize_file_change_data()

        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output = []
            self.analyzer_summary = FileChangeSummary(
                total_changes=0,
                added_files=0,
                modified_files=0,
                deleted_files=0
            )

    def analyze_file_changes(self, file_path: str) -> list[FileChangeData]:
        with open(file_path, 'r') as file:
            data = json.load(file)

        return self.parse_file_changes(data)

    @staticmethod
    def parse_file_changes(data: dict[str, dict[str, str]]) -> list[FileChangeData]:
        changes = []
        for file_name, details in data.items():
            try:
                status = Status(details["status"])  # Konvertierung in das Enum
            except ValueError:
                raise ValueError(f"UngÃ¼ltiger Statuswert: {details['status']}")

            changes.append(
                FileChangeData(
                    file_name=file_name,
                    status=status,
                    file1_value=details.get("file1_value"),
                    file2_value=details.get("file2_value"),
                    value=details.get("value")
                )
            )
        return changes

    def summarize_file_change_data(self) -> FileChangeSummary:
        """
        Summarize the parsed file change data.

        Returns:
            FileChangeSummary: Summary of file changes.
        """
        total_changes = len(self.analyzer_output)
        added_files = len([change for change in self.analyzer_output if change.status == Status.NEW_AFTER_MW])
        modified_files = len([change for change in self.analyzer_output if change.status == Status.CHANGED_AFTER_MW])
        deleted_files = len([change for change in self.analyzer_output if change.status == Status.MISSING_AFTER_MW])

        return FileChangeSummary(
            total_changes=total_changes,
            added_files=added_files,
            modified_files=modified_files,
            deleted_files=deleted_files
        )


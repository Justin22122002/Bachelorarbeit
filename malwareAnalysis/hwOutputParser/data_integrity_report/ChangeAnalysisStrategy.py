from abc import ABC, abstractmethod
from typing import Type, TypeVar, List, Dict, Generic

from malwareAnalysis.hwOutputParser.data_integrity_report.ChangeData import ChangeData
from malwareAnalysis.hwOutputParser.data_integrity_report.Status import Status

T = TypeVar('T', bound=ChangeData)

class ChangeAnalysisStrategy(ABC, Generic[T]):

    @abstractmethod
    def analyze_changes(self, file_path: str) -> List[T]:
        pass

    @staticmethod
    def parse_changes(data: Dict[str, Dict[str, str]], cls: Type[T]) -> List[T]:
        changes = []
        for key, details in data.items():
            try:
                status = Status(details["status"])  # Konvertierung in das Enum
            except ValueError:
                raise ValueError(f"UngÃ¼ltiger Statuswert: {details['status']}")

            changes.append(
                cls(
                    status=status,
                    file1_value=details.get("file1_value"),
                    file2_value=details.get("file2_value"),
                    value=details.get("value"),
                    **{cls.__name__.lower(): key}
                )
            )
        return changes

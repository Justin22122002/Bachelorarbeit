import json

from malwareAnalysis.hwOutputParser.data_integrity_report.Status import Status
from malwareAnalysis.hwOutputParser.data_integrity_report.registry.RegistryChangeData import RegistryChangeData
from malwareAnalysis.hwOutputParser.data_integrity_report.registry.RegistryChangeSummary import RegistryChangeSummary
from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem


class RegistryChangeAnalysisStrategy(AnalysisStrategy[RegistryChangeData, RegistryChangeSummary]):

    def get_command(self) -> dict[OperatingSystem, str]:
        return {}

    def analyze_output(self, file_path: str = None) -> None:
        path_to_use = file_path if file_path else self.get_file_path()

        try:
            with open(path_to_use, 'r') as file:
                data = json.load(file)  # Versuch, den Inhalt als JSON zu laden

            self.analyzer_output = self.parse_registry_changes(data)
            self.analyzer_summary = self.summarize_registry_change_data()

        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error: Failed to parse JSON file at {path_to_use}. {e}")
            self.analyzer_output = []
            self.analyzer_summary = RegistryChangeSummary(
                total_changes=0,
                added=0,
                modified=0,
                deleted=0
            )

    def analyze_registry_changes(self, file_path: str) -> list[RegistryChangeData]:
        with open(file_path, 'r') as file:
            data = json.load(file)

        return self.parse_registry_changes(data)

    @staticmethod
    def parse_registry_changes(data: dict[str, dict[str, str]]) -> list[RegistryChangeData]:
        changes = []
        for registry_key, details in data.items():
            try:
                status = Status(details["status"])  # Konvertierung in das Enum
            except ValueError:
                raise ValueError(f"UngÃ¼ltiger Statuswert: {details['status']}")

            changes.append(
                RegistryChangeData(
                    registry_key=registry_key,
                    status=status,
                    file1_value=details.get("file1_value"),
                    file2_value=details.get("file2_value"),
                    value=details.get("value"),
                )
            )
        return changes


    def summarize_registry_change_data(self) -> RegistryChangeSummary:
        total_changes = len(self.analyzer_output)
        added = sum(1 for change in self.analyzer_output if change.status == Status.NEW_AFTER_MW)
        modified = sum(1 for change in self.analyzer_output if change.status == Status.CHANGED_AFTER_MW)
        deleted = sum(1 for change in self.analyzer_output if change.status == Status.MISSING_AFTER_MW)

        return RegistryChangeSummary(
            total_changes=total_changes,
            added=added,
            modified=modified,
            deleted=deleted
        )
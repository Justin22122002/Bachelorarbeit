import json
from typing import Optional

from malwareAnalysis.hwOutputParser.data_integrity_report.Status import Status
from malwareAnalysis.hwOutputParser.data_integrity_report.registry.RegistryChangeAnalysisStrategy import RegistryChangeAnalysisStrategy
from malwareAnalysis.hwOutputParser.data_integrity_report.registry.RegistryChangeData import RegistryChangeData
from malwareAnalysis.hwOutputParser.dynamic_analysis.DynamicAnalysis import DynamicAnalysis
from malwareAnalysis.malwareAnalysisTool.analysis.AnalyzerOptions import AnalyzerOptions


def main() -> None:
    file_name: str = "filtered_differences_registry_file_hashes.json"
    file_path: str = (
        "E:/data_sandbox/1fcbe5d51360bee55f55c791a95df8c61f73e117bda89b9439d74df5cee7aa71_benign/data_integrity_report"
        + "/"
        + file_name
    )

    try:
        strategy: RegistryChangeAnalysisStrategy = RegistryChangeAnalysisStrategy(DynamicAnalysis.create_analyzer_options())
        results: list[RegistryChangeData] = strategy.analyze_registry_changes(file_path)

        print("\nAnalyse der Registry-Änderungen:")
        for change in results:
            registry_key: str = change.registry_key
            status: Status = change.status
            file1_value: Optional[str] = change.file1_value
            file2_value: Optional[str] = change.file2_value
            value: Optional[str] = change.value

            print(f"Registry Key: {registry_key}")
            print(f"  Status: {status.value}")
            if file1_value:
                print(f"  File1 Value: {file1_value}")
            if file2_value:
                print(f"  File2 Value: {file2_value}")
            if value:
                print(f"  Value: {value}")
            print()

    except FileNotFoundError:
        print(f"Fehler: Datei '{file_path}' nicht gefunden.")
    except json.JSONDecodeError:
        print(f"Fehler: Die Datei '{file_path}' enthält keine gültigen JSON-Daten.")
    except KeyError as e:
        print(f"Fehler: Fehlender Schlüssel in den JSON-Daten - {e}")
    except ValueError as e:
        print(f"Fehler: {e}")
    except Exception as e:
        print(f"Ein unerwarteter Fehler ist aufgetreten: {e}")


if __name__ == "__main__":
    main()

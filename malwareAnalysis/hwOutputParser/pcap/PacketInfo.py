from dataclasses import dataclass
from typing import Optional


@dataclass
class PacketInfo:
    """
    Data class to store packet information.
    """
    origin_ip: Optional[str]
    destination_ip: Optional[str]
    origin_port: Optional[str]
    destination_port: Optional[str]
    protocol: Optional[str]
    service: Optional[str]
    duration: Optional[float]
    orig_bytes: Optional[int]
    resp_bytes: Optional[int]
    conn_state: Optional[str]
    missed_bytes: Optional[int]
    length: Optional[int]

    def __str__(self) -> str:
        """
        Custom string representation of the PacketInfo object.
        """
        return (f"PacketInfo(Source IP: {self.origin_ip}, Destination IP: {self.destination_ip}, "
                f"Source Port: {self.origin_port}, Destination Port: {self.destination_port}, "
                f"Protocol: {self.protocol}, Service: {self.service}, "
                f"Duration: {self.duration} seconds, Length: {self.length} bytes, "
                f"Origin Bytes: {self.orig_bytes}, Destination Bytes: {self.resp_bytes}, "
                f"Connection State: {self.conn_state}, Missed Bytes: {self.missed_bytes})")

# Mapping of network fields to class attributes
# id.orig_h        --> origin_ip
# id.orig_p        --> origin_port
# id.resp_h        --> destination_ip
# id.resp_p        --> destination_port
# proto            --> protocol
# service          --> service
# duration         --> duration
# orig_bytes       --> orig_bytes
# resp_bytes       --> resp_bytes
# conn_state       --> conn_state
# missed_bytes     --> missed_bytes
# history          --> Not used
# orig_pkts        --> Not used
# orig_ip_bytes    --> Not used
# resp_pkts        --> Not used
# resp_ip_bytes    --> Not used
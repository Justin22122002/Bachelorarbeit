import re
from typing_extensions import override

from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.AbstractRules import AbstractRules
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.PsListData import PsListData


class PsListRules(AbstractRules[PsListData]):
    """
    Rule-based analysis for PsListData.
    """
    allowed_process_names: list[str] = ["svchost.exe", "svch0st.exe"]
    suspicious_process_keywords: list[str] = ["svchost", "svch0st"]
    unusual_processes: list[PsListData] = []

    @override
    def find_unusual_processes(self) -> None:
        """
        Executes all rules and stores unusual processes in `unusual_processes`.
        """
        self.unusual_processes = []  # Reset the list

        for process in self.analyzer_output:
            # Check and add if the process is not already in the list
            if self.is_without_parent(process) and process not in self.unusual_processes:
                self.unusual_processes.append(process)

            if self.has_unusual_name(process) and process not in self.unusual_processes:
                self.unusual_processes.append(process)

    def is_without_parent(self, process: PsListData) -> bool:
        """
        Identifies unusual processes, such as processes without a parent process (PPID = 0).
        """
        return process.PPID == 0

    def has_unusual_name(self, process: PsListData) -> bool:
        """
        Identifies processes with unusual names (e.g., svch0st.exe instead of svchost.exe).
        """
        return (
            not re.match(r'^[a-zA-Z0-9_.-]+$', process.ImageFileName) or
            any(keyword in process.ImageFileName.lower() for keyword in self.suspicious_process_keywords) and
            process.ImageFileName.lower() not in self.allowed_process_names
        )

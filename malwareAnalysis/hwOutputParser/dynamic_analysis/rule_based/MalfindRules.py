from typing_extensions import override

from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.AbstractRules import AbstractRules
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.MalfindData import MalfindData


class MalfindRules(AbstractRules[MalfindData]):
    """
    Rule-based analysis for MalfindData.
    """
    suspicious_hex_patterns: list[str] = ["cc", "e9", "ff e0", "48 8b", "4d 5a"]
    unusual_processes: list[MalfindData] = []

    @override
    def find_unusual_processes(self) -> None:
        """
        Executes all rules and stores unusual memory findings in `unusual_processes`.
        """
        for malfind_data in self.analyzer_output:
            if self.is_suspicious_hex_disasm(malfind_data.Disasm) and malfind_data not in self.unusual_processes:
                self.unusual_processes.append(malfind_data)

    def is_suspicious_hex_disasm(self, disasm: str) -> bool:
        """
        Checks if a given disassembly contains suspicious hexadecimal patterns.
        """
        flattened_disasm: str = disasm.replace("\"", "").replace(" ", "").lower()
        return any(pattern.replace(" ", "").lower() in flattened_disasm for pattern in self.suspicious_hex_patterns)
import re
from abc import ABC
from typing import Generic, TypeVar

from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.AbstractRules import AbstractRules
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.PsData import PsData

T = TypeVar('T', bound=PsData)

class BasePsRules(AbstractRules[T], ABC, Generic[T]):
    """
    Base class for PsRules.
    """
    allowed_process_names: list[str] = [
        "svchost.exe",
        "svch0st.exe"
    ]

    suspicious_process_keywords: list[str] = [
        "svchost",
        "svch0st"
    ]

    def is_without_parent(self, process: T) -> bool:
        """
        Searches for unusual processes, such as processes without parent processes (PPID = 0).
        """
        return process.PPID == 0

    def has_unusual_name(self, process: T) -> bool:
        """
        Searches for unusual process names (e.g., svch0st.exe instead of svchost.exe).
        """
        image_file_name: str = process.ImageFileName.lower()
        return (
            not re.match(r'^[a-zA-Z0-9_.-]+$', image_file_name) or
            any(keyword in image_file_name for keyword in self.suspicious_process_keywords) and
            image_file_name not in self.allowed_process_names
        )
import json
from abc import ABC, abstractmethod
from typing import TypeVar, Generic

from malwareAnalysis.hwOutputParser.dynamic_analysis.DynamicAnalysis import DynamicAnalysis
from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.MalfindRules import MalfindRules
from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.NetScanRules import NetScanRules
from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.PsListRules import PsListRules
from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.PsScanRules import PsScanRules
from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.PsTreeRules import PsTreeRules
from malwareAnalysis.malwareAnalysisTool.analysis.MalfindStrategy import MalfindStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.NetScanStrategy import NetScanStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsListStrategy import PsListStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsScanStrategy import PsScanStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsTreeStrategy import PsTreeStrategy


class RuleAnalyzer:
    """
    Handles rule-based analysis for different strategies.
    """
    def __init__(self, base_path: str, directory: str, analyzed_folder: str, files: dict[str, str]) -> None:
        """
        Initializes RuleAnalyzer with paths and file mappings.
        """
        self.base_path: str = base_path
        self.directory: str = directory
        self.analyzed_folder: str = analyzed_folder
        self.files: dict[str, str] = files
        self.dynamic_analysis: DynamicAnalysis = DynamicAnalysis(base_path, directory, analyzed_folder)

    def run(self) -> None:
        """
        Runs the dynamic analysis on the specified files.
        """
        print("Starting dynamic analysis...")
        results: dict[str, any] = self.dynamic_analysis.run_analysis(self.files)
        self.dynamic_analysis.display_results(results)
        print("Dynamic analysis completed.")

    def analyze_pslist(self) -> None:
        """
        Runs rule-based analysis on PsList.
        """
        pslist_strategy: PsListStrategy = self.dynamic_analysis.process_pslist_strategy(self.files.get("pslist"))
        rule: PsListRules = PsListRules(pslist_strategy.analyzer_output)
        rule.find_unusual_processes()
        print(len(pslist_strategy.analyzer_output))
        print(len(rule.unusual_processes))

    def analyze_pstree(self) -> None:
        """
        Runs rule-based analysis on PsTree.
        """
        pstree_strategy: PsTreeStrategy = self.dynamic_analysis.process_pstree_strategy(self.files.get("pstree"))
        rule: PsTreeRules = PsTreeRules(pstree_strategy.analyzer_output)
        rule.find_unusual_processes()
        print(len(pstree_strategy.analyzer_output))
        print(len(rule.unusual_processes))

    def analyze_psscan(self) -> None:
        """
        Runs rule-based analysis on PsScan.
        """
        psscan_strategy: PsScanStrategy = self.dynamic_analysis.process_psscan_strategy(self.files.get("psscan"))
        rule: PsScanRules = PsScanRules(psscan_strategy.analyzer_output)
        rule.find_unusual_processes()
        print(len(psscan_strategy.analyzer_output))
        print(len(rule.unusual_processes))

    def analyze_malfind(self) -> None:
        """
        Runs rule-based analysis on Malfind.
        """
        malfind_strategy: MalfindStrategy = self.dynamic_analysis.process_malfind_strategy(self.files.get("malfind"))
        rule: MalfindRules = MalfindRules(malfind_strategy.analyzer_output)
        rule.find_unusual_processes()
        print(len(malfind_strategy.analyzer_output))
        print(len(rule.unusual_processes))

    def analyze_netscan(self) -> None:
        """
        Runs rule-based analysis on NetScan.
        """
        netscan_strategy: NetScanStrategy = self.dynamic_analysis.process_netscan_strategy(self.files.get("netscan"))
        rule: NetScanRules = NetScanRules(netscan_strategy.analyzer_output)
        rule.find_unusual_processes()
        print(len(netscan_strategy.analyzer_output))
        print(len(rule.unusual_processes))
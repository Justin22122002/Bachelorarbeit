from typing_extensions import override

from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.AbstractRules import AbstractRules
from malwareAnalysis.malwareAnalysisTool.analysis.models.data.NetscanData import NetscanData


class NetScanRules(AbstractRules[NetscanData]):
    """
    Rule-based analysis for NetscanData.
    """
    suspicious_ports: set[int] = {
        21, 23, 25, 80, 110, 113, 135, 137, 139, 143, 443, 465, 513, 514, 1080, 1524,
        2000, 2049, 2121, 3306, 4000, 4444, 5432, 6666, 6667, 10008, 12345, 27374, 31337,
    }

    suspicious_states: set[str] = {"SYN_SENT", "TIME_WAIT", "CLOSE_WAIT"}

    safe_ips: set[str] = {
        "192.168.1.1",
        "192.168.1.2",
        "192.168.2.132",
        "127.0.0.1",
        "8.8.8.8",
        "0.0.0.0",
        "::",
        "10.0.0.1",
    }

    unusual_processes: list[NetscanData] = []

    @override
    def find_unusual_processes(self) -> None:
        """
        Executes all rules and stores unusual network scan entries in `unusual_processes`.
        """
        for entry in self.analyzer_output:
            if self.is_dangerous(entry) and entry not in self.unusual_processes:
                self.unusual_processes.append(entry)

    def is_dangerous(self, entry: NetscanData) -> bool:
        """
        Determines if a network entry is dangerous based on IP, port, or state.
        """
        return (
            not self.is_safe_ip(entry.ForeignAddr) or
            self.is_suspicious_port(entry.LocalPort) or
            self.is_suspicious_state(entry.State)
        )

    def is_safe_ip(self, ip: str) -> bool:
        """
        Checks if the IP address is considered safe.
        """
        return ip in self.safe_ips

    def is_suspicious_port(self, port: int) -> bool:
        """
        Checks if the port is commonly associated with suspicious activity.
        """
        return port in self.suspicious_ports

    def is_suspicious_state(self, state: str) -> bool:
        """
        Checks if the connection state is suspicious.
        """
        return state in self.suspicious_states
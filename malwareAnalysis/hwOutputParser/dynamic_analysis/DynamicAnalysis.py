import json

from malwareAnalysis.hwOutputParser.data_integrity_report.file.FileChangeAnalysisStrategy import \
    FileChangeAnalysisStrategy
from malwareAnalysis.hwOutputParser.data_integrity_report.registry.RegistryChangeAnalysisStrategy import \
    RegistryChangeAnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.AnalysisStrategy import AnalysisStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.AnalyzerOptions import AnalyzerOptions
from malwareAnalysis.malwareAnalysisTool.analysis.MalfindStrategy import MalfindStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.NetScanStrategy import NetScanStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsListStrategy import PsListStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsScanStrategy import PsScanStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.PsTreeStrategy import PsTreeStrategy
from malwareAnalysis.malwareAnalysisTool.analysis.models.OperatingSystem import OperatingSystem


class DynamicAnalysis:
    """
    Handles the execution of different analysis strategies for dynamic malware analysis.
    """
    def __init__(self, base_path: str, directory: str, analyzed_folder: str):
        """
        Initializes DynamicAnalysis with paths and analyzer options.
        """
        self.base_path: str = base_path
        self.directory: str = directory
        self.analyzed_folder: str = analyzed_folder
        self.analyzer_options: AnalyzerOptions = self.create_analyzer_options()

    @staticmethod
    def create_analyzer_options() -> AnalyzerOptions:
        """
        Creates and returns analyzer options.
        """
        return AnalyzerOptions(
            input_path="",
            volatility3_path="../volatility3/vol.py",
            output_file_path="",
            output_dir_path="../testdata",
            operating_system=OperatingSystem.WINDOWS,
        )

    def get_file_path(self, file_name: str) -> str:
        """
        Constructs the full file path for the given file name.
        """
        return f"{self.base_path}/{self.directory}/{self.analyzed_folder}/{file_name}"

    @staticmethod
    def load_json_file(file_path: str) -> list[dict]:
        """
        Loads a JSON file and returns its contents.
        """
        try:
            with open(file_path, 'r') as file:
                return json.load(file)
        except FileNotFoundError:
            print(f"Error: File {file_path} not found.")
            raise
        except json.JSONDecodeError:
            print(f"Error: File {file_path} contains invalid JSON.")
            raise

    def process_malfind_strategy(self, file_name: str) -> MalfindStrategy:
        """
        Processes the Malfind strategy.
        """
        file_path: str = self.get_file_path(file_name)
        strategy: MalfindStrategy = MalfindStrategy(self.analyzer_options)
        strategy.analyze_output(file_path)
        return strategy

    def process_pstree_strategy(self, file_name: str) -> PsTreeStrategy:
        """
        Processes the PsTree strategy.
        """
        file_path: str = self.get_file_path(file_name)
        strategy: PsTreeStrategy = PsTreeStrategy(self.analyzer_options)
        strategy.analyze_output(file_path)
        return strategy

    def process_pslist_strategy(self, file_name: str) -> PsListStrategy:
        """
        Processes the PsList strategy.
        """
        file_path: str = self.get_file_path(file_name)
        strategy: PsListStrategy = PsListStrategy(self.analyzer_options)
        strategy.analyze_output(file_path)
        return strategy

    def process_psscan_strategy(self, file_name: str) -> PsScanStrategy:
        """
        Processes the PsScan strategy.
        """
        file_path: str = self.get_file_path(file_name)
        strategy: PsScanStrategy = PsScanStrategy(self.analyzer_options)
        strategy.analyze_output(file_path)
        return strategy

    def process_netscan_strategy(self, file_name: str) -> NetScanStrategy:
        """
        Processes the NetScan strategy.
        """
        file_path: str = self.get_file_path(file_name)
        strategy: NetScanStrategy = NetScanStrategy(self.analyzer_options)
        strategy.analyze_output(file_path)
        return strategy

    def process_user_file_changes_strategy(self, file_name: str) -> FileChangeAnalysisStrategy:
        """
        Processes the FileChangeAnalysis strategy.
        """
        file_path: str = self.get_file_path(file_name)
        strategy: FileChangeAnalysisStrategy = FileChangeAnalysisStrategy(self.analyzer_options)
        strategy.analyze_output(file_path)
        return strategy

    def process_registry_changes_strategy(self, file_name: str) -> RegistryChangeAnalysisStrategy:
        """
        Processes the RegistryChangeAnalysis strategy.
        """
        file_path: str = self.get_file_path(file_name)
        strategy: RegistryChangeAnalysisStrategy = RegistryChangeAnalysisStrategy(self.analyzer_options)
        strategy.analyze_output(file_path)
        return strategy

    def run_analysis(self, files: dict[str, str]) -> dict[str, AnalysisStrategy]:
        """
        Runs the analysis using the specified strategies and files.
        """
        results: dict[str, AnalysisStrategy] = {}
        for strategy_name, file_name in files.items():
            if strategy_name == "malfind":
                results[strategy_name] = self.process_malfind_strategy(file_name)
            elif strategy_name == "pstree":
                results[strategy_name] = self.process_pstree_strategy(file_name)
            elif strategy_name == "pslist":
                results[strategy_name] = self.process_pslist_strategy(file_name)
            elif strategy_name == "psscan":
                results[strategy_name] = self.process_psscan_strategy(file_name)
            elif strategy_name == "netscan":
                results[strategy_name] = self.process_netscan_strategy(file_name)
            elif strategy_name == "registry":
                results[strategy_name] = self.process_registry_changes_strategy(file_name)
            elif strategy_name == "file":
                results[strategy_name] = self.process_user_file_changes_strategy(file_name)
        return results

    def display_results(self, results: dict[str, AnalysisStrategy]) -> None:
        """
        Displays the results of the analysis.
        """
        print("\nAnalysis completed. Results:")
        for strategy_name, strategy in results.items():
            print(f"--- {strategy_name.capitalize()} ---")
            print(strategy.analyzer_output)

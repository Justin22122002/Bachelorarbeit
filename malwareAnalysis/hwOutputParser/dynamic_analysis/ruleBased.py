from malwareAnalysis.hwOutputParser.dynamic_analysis.rule_based.RuleAnalyzer import RuleAnalyzer


def initialize_default_analyzer() -> RuleAnalyzer:
    """
    Initializes an instance of RuleAnalyzer with default values.
    """
    base_path: str = "E:/data_sandbox"
    directory: str = "1fcbe5d51360bee55f55c791a95df8c61f73e117bda89b9439d74df5cee7aa71_benign"
    analyzed_folder: str = "analysed"
    files: dict[str, str] = {
        "malfind": "windows.malfind.Malfind_compared.json",
        "pstree": "windows.pstree_compared.json",
        "pslist": "windows.pslist_compared.json",
        "psscan": "windows.psscan_compared.json",
        "netscan": "windows.netscan_compared.json"
    }
    return RuleAnalyzer(base_path, directory, analyzed_folder, files)


def main() -> None:
    """
    Main function to run rule-based analysis.
    """
    analyzer: RuleAnalyzer = initialize_default_analyzer()
    analyzer.analyze_pslist()
    analyzer.analyze_pstree()
    analyzer.analyze_psscan()
    analyzer.analyze_netscan()
    analyzer.analyze_malfind()


if __name__ == "__main__":
    main()

import csv
import random

from LLM.dataset_Malware.DatasetManager import DatasetManager


def create_dataset_from_csv(csv_file_path: str, dataset_manager: DatasetManager):
    with open(csv_file_path, mode='r', encoding='utf-8') as file:
        csv_reader = csv.DictReader(file)

        for row in csv_reader:
            input_data = ', '.join(
                [f"{key}: {value}" for key, value in row.items() if
                 key != 'Label' and key != 'SubType' and key != 'Raw_Type'])

            instruction = "Analyze metrics to detect potential malware activities."

            label = row.get('Label')
            output = analyze_malware_activity(row, label)

            dataset_manager.add_entry(instruction, input_data, output)

    dataset_manager.save_to_json()


def analyze_malware_activity(row, label):
    if label == "Benign":
        return analyze_benign_activity(row)
    elif label == "Malware":
        return analyze_malware_activity_details(row)
    else:
        return "Unbekanntes Label"


def analyze_malware_activity_details(row):
    output = ""

    # PsList Metrics: Analyzing Processes and Threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    pslist_statements = [
        (nproc > 100,
         [f"A high number of processes (nproc: {nproc}), could indicate a compromised system.",
          f"The process detection shows an unusually high number (nproc: {nproc}), which could indicate malware.",
          f"A high number of processes (nproc: {nproc}) could be an indicator of an infection."],
         [f"Normal number of processes (nproc: {nproc}) indicates typical system behavior.",
          f"Low number of processes (nproc: {nproc}) shows no signs of infection."])
    ]
    for condition, pos, neg in pslist_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    procs64bit_statements = [
        (nprocs64bit > (nproc / 2),
         [
             f"A high percentage of 64-bit processes (nprocs64bit: {nprocs64bit}) could indicate advanced or hidden malware.",
             f"An excessive percentage of 64-bit processes (nprocs64bit: {nprocs64bit}) might suggest a deeper infection.",
             f"The processor structure shows a high percentage of 64-bit processes (nprocs64bit: {nprocs64bit}), which could be unusual."],
         [f"Standard proportion of 64-bit processes (nprocs64bit: {nprocs64bit}) is typical for modern systems."])
    ]
    for condition, pos, neg in procs64bit_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    avg_threads_statements = [
        (8 < avg_threads < 15,
         [
             f"Average threads per process (avg_threads: {avg_threads}) are within the typical range, but further investigation is needed if processes are unusual.",
             f"Average threads (avg_threads: {avg_threads}) appear normal, but detailed checks are required if processes seem suspicious.",
             f"The average number of threads per process (avg_threads: {avg_threads}) is within the normal range, but suspicious processes should be further investigated."],
         [f"Low average threads (avg_threads: {avg_threads}) could indicate limited processes.",
          f"High average threads (avg_threads: {avg_threads}) might show overuse of system resources, warranting further investigation."])
    ]
    for condition, pos, neg in avg_threads_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    # DLL List Metrics: Analyzing DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    dll_statements = [
        (ndlls > 5000,
         [f"Many DLLs loaded (ndlls: {ndlls}), which could indicate malware using excessive libraries.",
          f"The high number of loaded DLLs (ndlls: {ndlls}) might suggest that malware is trying to use unnecessary libraries.",
          f"A large number of loaded DLLs (ndlls: {ndlls}) is unusual and could indicate malicious activity."],
         [f"Normal DLL load count (ndlls: {ndlls}) shows typical behavior for most applications."])
    ]
    for condition, pos, neg in dll_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    dll_avg_statements = [
        (avg_dlls_per_proc > 50,
         [
             f"An unusually high number of DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}), which is atypical and potentially harmful.",
             f"A high number of DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}) is suspicious and could indicate malicious processes.",
             f"Unusually many DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}), which could point to possible malware."],
         [
             f"A moderate number of DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}) indicates typical system behavior."])
    ]
    for condition, pos, neg in dll_avg_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    # Handle Metrics: Analyzing System Handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    handle_statements = [
        (nhandles > 50000,
         [f"Many handles in the system (nhandles: {nhandles}), indicating unusual activity.",
          f"The high number of handles (nhandles: {nhandles}) could indicate manipulations by malware.",
          f"A noticeable increase in the number of handles (nhandles: {nhandles}) suggests malicious activities."],
         [f"Normal number of handles (nhandles: {nhandles}) indicates regular system activity."])
    ]
    for condition, pos, neg in handle_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    file_handle_statements = [
        (nfile > 2000,
         [f"High number of file handles (nfile: {nfile}), which could indicate malware manipulating many resources.",
          f"The number of file handles (nfile: {nfile}) is unusually high, suggesting potential malicious activity.",
          f"Excessive use of file handles (nfile: {nfile}) could indicate unauthorized access and manipulation."],
         [f"Low number of file handles (nfile: {nfile}) indicates regular file system usage."])
    ]
    for condition, pos, neg in file_handle_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    event_handle_statements = [
        (nevent > 10000,
         [f"Many event handles (nevent: {nevent}), which could indicate suspicious system events by malware.",
          f"The event handles (nevent: {nevent}) are excessively high, potentially indicating malicious events in the system.",
          f"A high number of event handles (nevent: {nevent}) is unusual and could point to manipulations by malware."],
         [f"Low number of event handles (nevent: {nevent}) shows typical system activity."])
    ]
    for condition, pos, neg in event_handle_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    # MalFind Metrics: Analyzing Injections and Memory
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    injection_statements = [
        (ninjections > 10,
         [f"High number of code injections (ninjections: {ninjections}), a common indicator of malware.",
          f"The number of code injections (ninjections: {ninjections}) is unusually high, often indicating malware.",
          f"A high value for code injections (ninjections: {ninjections}) is a strong sign of malware activity."],
         [f"Low or no code injections (ninjections: {ninjections}) indicates healthy system behavior."])
    ]
    for condition, pos, neg in injection_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    commit_charge_statements = [
        (commitCharge > 1000,
         [f"High memory usage (commitCharge: {commitCharge}), possibly caused by malicious processes.",
          f"The high memory usage (commitCharge: {commitCharge}) could be caused by malware.",
          f"An unusually high memory usage (commitCharge: {commitCharge}) is concerning and may be caused by malicious processes."],
         [f"Normal memory usage (commitCharge: {commitCharge}) suggests regular system operation."])
    ]
    for condition, pos, neg in commit_charge_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    # PsxView Metrics: Analyzing Hidden Processes
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    psxview_statements = [
        (psxview_not_in_pslist > 0,
         [
             f"Processes missing from the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}), which could indicate hidden or malicious processes.",
             f"The number of processes not shown in the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}) could indicate hidden malicious processes.",
             f"Unusual discrepancies in the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}) point to invisible, potentially malicious processes."],
         [
             f"All processes are accounted for in the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}), suggesting a clean system."])
    ]
    for condition, pos, neg in psxview_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    # Callback Metrics: Analyzing Anonymous Callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    callback_statements = [
        (nanonymous > 200,
         [
             f"Many anonymous callbacks (nanonymous: {nanonymous}), a technique often used by malware to operate stealthily.",
             f"The number of anonymous callbacks (nanonymous: {nanonymous}) is very high, which could indicate malware.",
             f"A high value for anonymous callbacks (nanonymous: {nanonymous}) is often a sign of a malware infection."],
         [f"Low number of anonymous callbacks (nanonymous: {nanonymous}) suggests clean system activity."])
    ]
    for condition, pos, neg in callback_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    # Service Scan Metrics: Analyzing Services and Drivers
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    service_statements = [
        (nservices > 1000,
         [f"A high number of services (nservices: {nservices}) could indicate compromised system services.",
          f"Too many services (nservices: {nservices}) could suggest that the system is controlled by malware.",
          f"The number of system services (nservices: {nservices}) is suspiciously high and may indicate an infection."],
         [f"Normal number of services (nservices: {nservices}) indicates proper system behavior.",
          f"Low number of services (nservices: {nservices}) suggests a clean system state."])
    ]
    for condition, pos, neg in service_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    driver_statements = [
        (kernel_drivers > 700,
         [f"A high number of kernel drivers (kernel_drivers: {kernel_drivers}) could indicate deep system compromise.",
          f"The number of kernel drivers (kernel_drivers: {kernel_drivers}) suggests deep system access, pointing to malware.",
          f"An excessive number of kernel drivers (kernel_drivers: {kernel_drivers}) suggests potential deep system manipulations by malware."],
         [f"Normal number of kernel drivers (kernel_drivers: {kernel_drivers}) indicates healthy system operation."])
    ]
    for condition, pos, neg in driver_statements:
        output += random.choice(pos) if condition else random.choice(neg)

    output += "Suspicious activities detected."
    return output


def analyze_benign_activity(row):
    output = []

    # PsList Metrics: Analyzing processes and threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    proc_statements = [
        (nproc <= 100,
         [f"The number of processes (nproc: {nproc}) is within the normal range.",
          f"{nproc} processes were found, which is considered harmless.",
          f"The number of processes (nproc: {nproc}) is typical for a system without unusual activity."],
         [f"The number of processes (nproc: {nproc}) seems to be higher than normal, but still under control."])
    ]
    for condition, pos, neg in proc_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    procs64bit_statements = [
        (nprocs64bit <= (nproc / 2),
         [f"The proportion of 64-bit processes (nprocs64bit: {nprocs64bit}) is unremarkable.",
          f"With only {nprocs64bit} 64-bit processes, there are no anomalies.",
          f"The number of 64-bit processes (nprocs64bit: {nprocs64bit}) is within the usual range."],
         [f"An unusually high proportion of 64-bit processes could suggest system tampering."])
    ]

    for condition, pos, neg in procs64bit_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    threads_statements = [
        (8 <= avg_threads <= 15,
         [f"Average threads per process (avg_threads: {avg_threads}) are in the typical range.",
          f"The number of threads per process (avg_threads: {avg_threads}) is normal.",
          f"The average number of {avg_threads} threads per process is as expected."],
         [f"The average number of threads per process (avg_threads: {avg_threads}) appears slightly off."])
    ]
    for condition, pos, neg in threads_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    # DLL List Metrics: Analyzing DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    dll_statements = [
        (ndlls <= 5000,
         [f"The number of loaded DLLs (ndlls: {ndlls}) is normal.",
          f"{ndlls} DLLs were loaded, which is within the normal range.",
          f"The {ndlls} loaded DLLs do not indicate any unusual activity."],
         [f"An unusually high number of loaded DLLs (ndlls: {ndlls}) could suggest abnormal behavior."])
    ]
    for condition, pos, neg in dll_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    avg_dlls_statements = [
        (avg_dlls_per_proc <= 50,
         [f"The average number of DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}) is unremarkable.",
          f"With {avg_dlls_per_proc} DLLs per process, there are no suspicious patterns.",
          f"The {avg_dlls_per_proc} DLLs per process are within an acceptable range."],
         [f"The average number of DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}) is unusually high."])
    ]
    for condition, pos, neg in avg_dlls_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    # Handle Metrics: Analyzing system handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    handles_statements = [
        (nhandles <= 50000,
         [f"The number of handles (nhandles: {nhandles}) is unremarkable.",
          f"There are {nhandles} handles, which is considered normal.",
          f"With {nhandles} handles, there are no signs of suspicious activity."],
         [f"An unusually high number of handles (nhandles: {nhandles}) could be an indication of abnormal behavior."])
    ]
    for condition, pos, neg in handles_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    file_handles_statements = [
        (nfile <= 2000,
         [f"The number of file handles (nfile: {nfile}) is within normal limits.",
          f"{nfile} file handles were found, which does not raise concerns.",
          f"With only {nfile} file handles, no unusual activity is observed."],
         [f"An unusual number of file handles (nfile: {nfile}) could be suspicious."])
    ]
    for condition, pos, neg in file_handles_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    event_handles_statements = [
        (nevent <= 10000,
         [f"The number of event handles (nevent: {nevent}) is within the normal range.",
          f"With {nevent} event handles, there are no anomalies.",
          f"The number of event handles (nevent: {nevent}) is as expected."],
         [f"Many event handles (nevent: {nevent}), which could indicate suspicious system events by malware.",
          f"The event handles (nevent: {nevent}) are excessively high, potentially indicating malicious events in the system.",
          f"A high number of event handles (nevent: {nevent}) is unusual and could point to manipulations by malware."])
    ]
    for condition, pos, neg in event_handles_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    # MalFind Metrics: Analyzing injections and memory
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    injections_statements = [
        (ninjections <= 10,
         [f"The number of code injections (ninjections: {ninjections}) is within the normal range.",
          f"With {ninjections} code injections, there are no anomalies.",
          f"The {ninjections} injections are unremarkable."],
         [f"The number of code injections (ninjections: {ninjections}) seems suspiciously high."])
    ]
    for condition, pos, neg in injections_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    commit_charge_statements = [
        (commitCharge <= 1000,
         [f"The memory usage (commitCharge: {commitCharge}) is unremarkable.",
          f"With a memory usage of {commitCharge}, there are no signs of unusual activity.",
          f"The commitCharge value (commitCharge: {commitCharge}) is within acceptable limits."],
         [f"High memory usage (commitCharge: {commitCharge}) could indicate unusual system behavior."])
    ]
    for condition, pos, neg in commit_charge_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    # PsxView Metrics: Analyzing hidden processes
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    psxview_statements = [
        (psxview_not_in_pslist == 0,
         [f"All processes are present in the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}).",
          f"There are no processes missing from the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}).",
          f"All running processes are found in the PsList (psxview_not_in_pslist: {psxview_not_in_pslist})."],
         [
             f"Some processes are missing from the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}), which could be indicative of hidden activity."])
    ]
    for condition, pos, neg in psxview_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    # Callback Metrics: Analyzing anonymous callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    callbacks_statements = [
        (nanonymous <= 200,
         [f"The number of anonymous callbacks (nanonymous: {nanonymous}) is normal.",
          f"With {nanonymous} anonymous callbacks, there are no unusual activities.",
          f"The number of anonymous callbacks (nanonymous: {nanonymous}) is within expected values."],
         [
             f"An unusually high number of anonymous callbacks (nanonymous: {nanonymous}) could suggest suspicious behavior."])
    ]
    for condition, pos, neg in callbacks_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    # Service Scan Metrics: Analyzing services and drivers
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    services_statements = [
        (nservices <= 1000,
         [f"The number of services (nservices: {nservices}) is within normal limits.",
          f"{nservices} services were found, which raises no concerns.",
          f"The number of running services (nservices: {nservices}) is unremarkable."],
         [f"The number of services (nservices: {nservices}) seems unusually high."])
    ]
    for condition, pos, neg in services_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    kernel_drivers_statements = [
        (kernel_drivers <= 700,
         [f"The number of kernel drivers (kernel_drivers: {kernel_drivers}) is unremarkable.",
          f"With {kernel_drivers} kernel drivers, there are no signs of unusual activity.",
          f"The number of kernel drivers (kernel_drivers: {kernel_drivers}) is within the normal range."],
         [f"The number of kernel drivers (kernel_drivers: {kernel_drivers}) seems unusually high."])
    ]
    for condition, pos, neg in kernel_drivers_statements:
        if condition:
            output.append(random.choice(pos))
        else:
            output.append(random.choice(neg))

    output.append("No suspicious activities were detected.")

    return " ".join(output)


def main() -> None:
    dataset_manager = DatasetManager('./../../ml/datasets/malware_analysis_dataset_2.json')
    csv_file_path = './../../ml/datasets/output_file_Run_1_labeled.csv'
    create_dataset_from_csv(csv_file_path, dataset_manager)
    print(dataset_manager.get_dataset())


if __name__ == '__main__':
    main()

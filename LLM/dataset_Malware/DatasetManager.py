import json

class DatasetManager:
    def __init__(self, file_path: str):
        """
        Initialize the DatasetManager with a file path.

        :param file_path: Path to the JSON file for saving/loading the dataset_Malware.
        """
        self.file_path = file_path
        self.dataset = []  # Initialize an empty dataset_Malware

    def add_entry(self, instruction: str, input_data: str, output: str):
        """
        Add a new entry to the dataset_Malware.

        :param instruction: Instruction text
        :param input_data: Input data for the instruction
        :param output: Expected output for the instruction
        """
        entry = {
            "instruction": instruction,
            "input": input_data,
            "output": output
        }
        self.dataset.append(entry)

    def save_to_json(self):
        """
        Save the dataset_Malware to a JSON file.
        """
        with open(self.file_path, 'w', encoding='utf-8') as file:
            json.dump(self.dataset, file, indent=4, ensure_ascii=False)

    def load_from_json(self):
        """
        Load the dataset_Malware from a JSON file.
        """
        try:
            with open(self.file_path, 'r', encoding='utf-8') as file:
                self.dataset = json.load(file)
        except FileNotFoundError:
            print(f"File not found: {self.file_path}. Starting with an empty dataset_Malware.")
            self.dataset = []

    def get_dataset(self) -> list[dict[str, str]]:
        """
        Retrieve the current dataset_Malware.

        :return: The dataset_Malware as a list of dictionaries.
        """
        return self.dataset
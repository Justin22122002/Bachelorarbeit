import csv

from LLM.dataset_Malware.DatasetManager import DatasetManager


def create_dataset_from_csv(csv_file_path: str, dataset_manager: DatasetManager):
    with open(csv_file_path, mode='r', encoding='utf-8') as file:
        csv_reader = csv.DictReader(file)

        for row in csv_reader:
            input_data = ', '.join(
                [f"{key}: {value}" for key, value in row.items() if
                 key != 'Label' and key != 'SubType' and key != 'Raw_Type'])

            instruction = "Analyze metrics to detect potential malware activities."

            # Pass the 'Label' field as the second argument to 'analyze_malware_activity'
            label = row.get('Label')  # Ensure 'Label' exists in the row
            output = analyze_malware_activity(row, label)  # Pass both row and label to the function

            dataset_manager.add_entry(instruction, input_data, output)

    dataset_manager.save_to_json()


def analyze_malware_activity(row, label):
    if label == "Benign":
        return analyze_benign_activity(row)
    elif label == "Malware":
        return analyze_malware_activity_details(row)
    else:
        return "Unknown Label"

def analyze_malware_activity_details(row):
    output = ""

    # PsList Metrics: Analyze processes and threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    if nproc > 100:
        output += f"High number of processes (nproc: {nproc}), could indicate a compromised system. "
    if nprocs64bit > (nproc / 2):
        output += f"A high proportion of 64-bit processes (nprocs64bit: {nprocs64bit}) could indicate advanced or hidden malware. "
    if 8 < avg_threads < 15:
        output += f"Average threads per process (avg_threads: {avg_threads}) are within the typical range, but further investigation is needed for unusual processes. "

    # DLL List Metrics: Analyze DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    if ndlls > 5000:
        output += f"Many DLLs loaded (ndlls: {ndlls}), which could indicate malware using excessive libraries. "
    if avg_dlls_per_proc > 50:
        output += f"High average DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}), which is unusual and possibly harmful. "

    # Handle Metrics: Analyze system handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    if nhandles > 50000:
        output += f"Many handles in the system (nhandles: {nhandles}), indicating unusual activity. "
    if nfile > 2000:
        output += f"High number of file handles (nfile: {nfile}), possibly indicating malware manipulating many resources. "
    if nevent > 10000:
        output += f"Many event handles (nevent: {nevent}), which could indicate suspicious system events caused by malware. "

    # MalFind Metrics: Analyze injections and memory
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    if ninjections > 10:
        output += f"High number of code injections (ninjections: {ninjections}), a common indicator of malware. "
    if commitCharge > 1000:
        output += f"High memory usage (commitCharge: {commitCharge}), possibly caused by malicious processes. "

    # PsxView Metrics: Analyze hidden processes
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    if psxview_not_in_pslist > 0:
        output += f"Processes missing from PsList (psxview_not_in_pslist: {psxview_not_in_pslist}), could indicate hidden or malicious processes. "

    # Callback Metrics: Analyze anonymous callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    if nanonymous > 200:
        output += f"Many anonymous callbacks (nanonymous: {nanonymous}), a technique commonly used by malware to operate stealthily. "

    # Service Scan Metrics: Analyze services and drivers
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    if nservices > 1000:
        output += f"A high number of services (nservices: {nservices}) could indicate compromised system services. "
    if kernel_drivers > 700:
        output += f"A high number of kernel drivers (kernel_drivers: {kernel_drivers}) could indicate deep system compromise. "

    output += "Suspicious activities detected."

    return output

def analyze_benign_activity(row):
    output = "The system shows no suspicious activities. "

    # PsList Metrics: Analyze processes and threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    if nproc <= 100:
        output += f"The number of processes (nproc: {nproc}) is within the normal range. "
    if nprocs64bit <= (nproc / 2):
        output += f"The proportion of 64-bit processes (nprocs64bit: {nprocs64bit}) is unremarkable. "
    if 8 <= avg_threads <= 15:
        output += f"Average threads per process (avg_threads: {avg_threads}) are within the typical range. "

    # DLL List Metrics: Analyze DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    if ndlls <= 5000:
        output += f"The number of loaded DLLs (ndlls: {ndlls}) is normal. "
    if avg_dlls_per_proc <= 50:
        output += f"The average number of DLLs per process (avg_dlls_per_proc: {avg_dlls_per_proc}) is unremarkable. "

    # Handle Metrics: Analyze system handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    if nhandles <= 50000:
        output += f"The number of handles (nhandles: {nhandles}) is unremarkable. "
    if nfile <= 2000:
        output += f"The number of file handles (nfile: {nfile}) is normal. "
    if nevent <= 10000:
        output += f"The number of event handles (nevent: {nevent}) is within the normal range. "

    # MalFind Metrics: Analyze injections and memory
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    if ninjections <= 10:
        output += f"The number of code injections (ninjections: {ninjections}) is within the normal range. "
    if commitCharge <= 1000:
        output += f"Memory usage (commitCharge: {commitCharge}) is unremarkable. "

    # PsxView Metrics: Analyze hidden processes
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    if psxview_not_in_pslist == 0:
        output += f"All processes are present in the PsList (psxview_not_in_pslist: {psxview_not_in_pslist}). "

    # Callback Metrics: Analyze anonymous callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    if nanonymous <= 200:
        output += f"The number of anonymous callbacks (nanonymous: {nanonymous}) is normal. "

    # Service Scan Metrics: Analyze services and drivers
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    if nservices <= 1000:
        output += f"The number of services (nservices: {nservices}) is within the normal range. "
    if kernel_drivers <= 700:
        output += f"The number of kernel drivers (kernel_drivers: {kernel_drivers}) is unremarkable. "

    output += "No suspicious activities detected."

    return output


def main() -> None:
    dataset_manager = DatasetManager('malware_analysis_dataset.json')
    csv_file_path = 'output_file_Run_1_labeled.csv'
    create_dataset_from_csv(csv_file_path, dataset_manager)
    print(dataset_manager.get_dataset())

if __name__ == '__main__':
    main()
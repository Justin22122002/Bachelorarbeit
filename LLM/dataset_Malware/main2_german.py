import csv
import random

from LLM.dataset_Malware.DatasetManager import DatasetManager

def create_dataset_from_csv(csv_file_path: str, dataset_manager: DatasetManager):
    with open(csv_file_path, mode='r', encoding='utf-8') as file:
        csv_reader = csv.DictReader(file)

        for row in csv_reader:
            input_data = ', '.join(
                [f"{key}: {value}" for key, value in row.items() if
                 key != 'Label' and key != 'SubType' and key != 'Raw_Type'])

            instruction = "Analyse von Metriken, um potenzielle Malware-Aktivitäten zu erkennen."

            label = row.get('Label')
            output = analyze_malware_activity(row, label)

            dataset_manager.add_entry(instruction, input_data, output)

    dataset_manager.save_to_json()


def analyze_malware_activity(row, label):
    if label == "Benign":
        return analyze_benign_activity(row)
    elif label == "Malware":
        return analyze_malware_activity_details(row)
    else:
        return "Unbekanntes Label"


def analyze_malware_activity_details(row):
    output = ""

    # PsList Metrics: Analyse der Prozesse und Threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    pslist_statements = [
        (nproc > 100, f"Hohe Anzahl an Prozessen (nproc: {nproc}), könnte auf ein kompromittiertes System hinweisen.",
                         f"Die Prozesserkennung zeigt eine ungewöhnlich hohe Anzahl (nproc: {nproc}), was auf Malware hinweisen könnte.",
                         f"Eine hohe Prozessanzahl (nproc: {nproc}) könnte ein Indikator für eine Infektion sein.")
    ]
    for condition, *messages in pslist_statements:
        if condition:
            output += random.choice(messages)

    procs64bit_statements = [
        (nprocs64bit > (nproc / 2), f"Ein hoher Anteil an 64-Bit-Prozessen (nprocs64bit: {nprocs64bit}) könnte auf fortschrittliche oder versteckte Malware hinweisen.",
                                    f"Ein übermäßiger Anteil an 64-Bit-Prozessen (nprocs64bit: {nprocs64bit}) deutet möglicherweise auf eine tiefergehende Infektion hin.",
                                    f"Die Prozessorstruktur zeigt, dass ein hoher Anteil an Prozessen 64-Bit ist (nprocs64bit: {nprocs64bit}), was ungewöhnlich sein könnte.")
    ]
    for condition, *messages in procs64bit_statements:
        if condition:
            output += random.choice(messages)

    avg_threads_statements = [
        (8 < avg_threads < 15, f"Durchschnittliche Threads pro Prozess (avg_threads: {avg_threads}) liegen im typischen Bereich, jedoch sind bei ungewöhnlichen Prozessen weitere Untersuchungen nötig.",
                               f"Durchschnittliche Threads (avg_threads: {avg_threads}) erscheinen normal, aber es sind detaillierte Prüfungen erforderlich, wenn Prozesse ungewöhnlich wirken.",
                               f"Die durchschnittliche Anzahl an Threads pro Prozess (avg_threads: {avg_threads}) ist innerhalb der Norm, aber bei verdächtigen Prozessen sollte weiter untersucht werden.")
    ]
    for condition, *messages in avg_threads_statements:
        if condition:
            output += random.choice(messages)

    # DLL List Metrics: Analyse der DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    dll_statements = [
        (ndlls > 5000, f"Viele DLLs geladen (ndlls: {ndlls}), was auf Malware hindeuten könnte, die übermäßige Bibliotheken verwendet.",
                        f"Die hohe Anzahl an geladenen DLLs (ndlls: {ndlls}) könnte darauf hindeuten, dass die Malware versucht, unnötige Bibliotheken zu verwenden.",
                        f"Eine große Anzahl an geladenen DLLs (ndlls: {ndlls}) ist ungewöhnlich und könnte auf schadhafte Aktivitäten hinweisen.")
    ]
    for condition, *messages in dll_statements:
        if condition:
            output += random.choice(messages)

    dll_avg_statements = [
        (avg_dlls_per_proc > 50, f"Durchschnittlich viele DLLs pro Prozess (avg_dlls_per_proc: {avg_dlls_per_proc}), was untypisch und möglicherweise schädlich ist.",
                                 f"Eine hohe Anzahl an DLLs pro Prozess (avg_dlls_per_proc: {avg_dlls_per_proc}) ist auffällig und könnte auf schadhafte Prozesse hinweisen.",
                                 f"Ungewöhnlich viele DLLs pro Prozess (avg_dlls_per_proc: {avg_dlls_per_proc}), was auf mögliche Malware hindeutet.")
    ]
    for condition, *messages in dll_avg_statements:
        if condition:
            output += random.choice(messages)

    # Handle Metrics: Analyse der System-Handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    handle_statements = [
        (nhandles > 50000, f"Viele Handles im System (nhandles: {nhandles}), was auf ungewöhnliche Aktivität hinweist.",
                           f"Die hohe Anzahl an Handles (nhandles: {nhandles}) könnte auf Manipulationen durch Malware hindeuten.",
                           f"Ein auffälliger Anstieg in der Anzahl der Handles (nhandles: {nhandles}) lässt auf böswillige Aktivitäten schließen.")
    ]
    for condition, *messages in handle_statements:
        if condition:
            output += random.choice(messages)

    file_handle_statements = [
        (nfile > 2000, f"Hohe Anzahl an Datei-Handles (nfile: {nfile}), was möglicherweise auf Malware hinweist, die viele Ressourcen manipuliert.",
                        f"Die Anzahl der Datei-Handles (nfile: {nfile}) ist außergewöhnlich hoch, was auf schadhafte Aktivitäten hindeuten könnte.",
                        f"Ein übermäßiger Gebrauch von Datei-Handles (nfile: {nfile}) könnte auf unautorisierte Zugriffe und Manipulationen hindeuten.")
    ]
    for condition, *messages in file_handle_statements:
        if condition:
            output += random.choice(messages)

    event_handle_statements = [
        (nevent > 10000, f"Viele Event-Handles (nevent: {nevent}), könnte auf verdächtige Systemereignisse durch Malware hinweisen.",
                          f"Die Event-Handles (nevent: {nevent}) sind übermäßig hoch und könnten auf schadhafte Ereignisse im System hindeuten.",
                          f"Ein hoher Wert an Event-Handles (nevent: {nevent}) ist ungewöhnlich und könnte auf Manipulationen von Malware hinweisen.")
    ]
    for condition, *messages in event_handle_statements:
        if condition:
            output += random.choice(messages)

    # MalFind Metrics: Analyse der Injektionen und Speicher
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    injection_statements = [
        (ninjections > 10, f"Hohe Anzahl an Code-Injektionen (ninjections: {ninjections}), ein häufiger Indikator für Malware.",
                            f"Die Anzahl an Code-Injektionen (ninjections: {ninjections}) ist ungewöhnlich hoch und deutet oft auf Malware hin.",
                            f"Ein hoher Wert an Code-Injektionen (ninjections: {ninjections}) ist ein starkes Anzeichen für Malware-Aktivitäten.")
    ]
    for condition, *messages in injection_statements:
        if condition:
            output += random.choice(messages)

    commit_charge_statements = [
        (commitCharge > 1000, f"Hoher Speicherverbrauch (commitCharge: {commitCharge}), möglicherweise durch schadhafte Prozesse verursacht.",
                               f"Der hohe Speicherverbrauch (commitCharge: {commitCharge}) könnte von Malware hervorgerufen werden.",
                               f"Ein hoher Speicherverbrauch (commitCharge: {commitCharge}) ist auffällig und könnte durch schadhafte Prozesse bedingt sein.")
    ]
    for condition, *messages in commit_charge_statements:
        if condition:
            output += random.choice(messages)

    # PsxView Metrics: Analyse versteckter Prozesse
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    psxview_statements = [
        (psxview_not_in_pslist > 0, f"Prozesse fehlen in der PsList (psxview_not_in_pslist: {psxview_not_in_pslist}), was auf verborgene oder schadhafte Prozesse hindeuten könnte.",
                                   f"Die Anzahl an Prozessen, die nicht in der PsList angezeigt werden (psxview_not_in_pslist: {psxview_not_in_pslist}), könnte auf versteckte schadhafte Prozesse hindeuten.",
                                   f"Ungewöhnliche Diskrepanzen in der PsList (psxview_not_in_pslist: {psxview_not_in_pslist}) lassen auf unsichtbare, potenziell schadhafte Prozesse schließen.")
    ]
    for condition, *messages in psxview_statements:
        if condition:
            output += random.choice(messages)

    # Callback Metrics: Analyse der anonymen Callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    callback_statements = [
        (nanonymous > 200, f"Viele anonyme Callbacks (nanonymous: {nanonymous}), eine Technik, die häufig von Malware verwendet wird, um unauffällig zu arbeiten.",
                            f"Die Anzahl an anonymen Callbacks (nanonymous: {nanonymous}) ist sehr hoch, was auf Malware hindeuten könnte.",
                            f"Ein hoher Wert an anonymen Callbacks (nanonymous: {nanonymous}) deutet häufig auf eine Malware-Infektion hin.")
    ]
    for condition, *messages in callback_statements:
        if condition:
            output += random.choice(messages)

    # Service Scan Metrics: Analyse von Diensten und Treibern
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    service_statements = [
        (nservices > 1000, f"Eine hohe Anzahl an Diensten (nservices: {nservices}) könnte auf kompromittierte Systemdienste hinweisen.",
                            f"Zu viele Dienste (nservices: {nservices}) könnten darauf hinweisen, dass das System von Malware kontrolliert wird.",
                            f"Die Anzahl der Systemdienste (nservices: {nservices}) ist verdächtig hoch und könnte auf eine Infektion hinweisen.")
    ]
    for condition, *messages in service_statements:
        if condition:
            output += random.choice(messages)

    driver_statements = [
        (kernel_drivers > 700, f"Eine hohe Anzahl an Kernel-Treibern (kernel_drivers: {kernel_drivers}) könnte auf eine tiefe Systemkompromittierung hinweisen.",
                               f"Die Anzahl der Kernel-Treiber (kernel_drivers: {kernel_drivers}) deutet auf einen tiefen Systemzugriff hin, was auf Malware hindeutet.",
                               f"Ein übermäßiger Wert an Kernel-Treibern (kernel_drivers: {kernel_drivers}) lässt auf potenziell tiefgreifende Systemmanipulationen durch Malware schließen.")
    ]
    for condition, *messages in driver_statements:
        if condition:
            output += random.choice(messages)

    output += "Verdächtigen Aktivitäten erkannt."
    return output


def analyze_benign_activity(row):
    output = []

    # PsList Metrics: Analyse der Prozesse und Threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    proc_msgs = [
        f"Die Anzahl der Prozesse (nproc: {nproc}) liegt im normalen Bereich.",
        f"Es wurden {nproc} Prozesse gefunden, was als unbedenklich angesehen wird.",
        f"Die Anzahl der Prozesse (nproc: {nproc}) ist typisch für ein System ohne ungewöhnliche Aktivität."
    ]

    if nproc <= 100:
        output.append(random.choice(proc_msgs))

    procs64bit_msgs = [
        f"Der Anteil der 64-Bit-Prozesse (nprocs64bit: {nprocs64bit}) ist unauffällig.",
        f"Mit nur {nprocs64bit} 64-Bit-Prozessen gibt es keine Auffälligkeiten.",
        f"Die Anzahl der 64-Bit-Prozesse (nprocs64bit: {nprocs64bit}) ist im üblichen Bereich."
    ]

    if nprocs64bit <= (nproc / 2):
        output.append(random.choice(procs64bit_msgs))

    threads_msgs = [
        f"Durchschnittliche Threads pro Prozess (avg_threads: {avg_threads}) im typischen Bereich.",
        f"Die Anzahl der Threads pro Prozess (avg_threads: {avg_threads}) ist normal.",
        f"Die durchschnittliche Anzahl von {avg_threads} Threads pro Prozess entspricht den Erwartungen."
    ]

    if 8 <= avg_threads <= 15:
        output.append(random.choice(threads_msgs))

    # DLL List Metrics: Analyse der DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    dll_msgs = [
        f"Die Anzahl der geladenen DLLs (ndlls: {ndlls}) ist normal.",
        f"Es wurden {ndlls} DLLs geladen, was innerhalb des normalen Bereichs liegt.",
        f"Die {ndlls} geladenen DLLs deuten auf keine ungewöhnlichen Aktivitäten hin."
    ]

    if ndlls <= 5000:
        output.append(random.choice(dll_msgs))

    avg_dlls_msgs = [
        f"Die durchschnittliche Anzahl der DLLs pro Prozess (avg_dlls_per_proc: {avg_dlls_per_proc}) ist unbedenklich.",
        f"Mit {avg_dlls_per_proc} DLLs pro Prozess gibt es keine auffälligen Muster.",
        f"Die {avg_dlls_per_proc} DLLs pro Prozess liegen im akzeptablen Bereich."
    ]

    if avg_dlls_per_proc <= 50:
        output.append(random.choice(avg_dlls_msgs))

    # Handle Metrics: Analyse der System-Handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    handles_msgs = [
        f"Die Anzahl der Handles (nhandles: {nhandles}) ist unauffällig.",
        f"Es gibt {nhandles} Handles, was als normal angesehen wird.",
        f"Mit {nhandles} Handles gibt es keine Verdachtsmomente."
    ]

    if nhandles <= 50000:
        output.append(random.choice(handles_msgs))

    file_handles_msgs = [
        f"Die Anzahl der Datei-Handles (nfile: {nfile}) ist in Ordnung.",
        f"Es wurden {nfile} Datei-Handles erkannt, was keine Bedenken aufwirft.",
        f"Mit nur {nfile} Datei-Handles ist keine untypische Aktivität zu erkennen."
    ]

    if nfile <= 2000:
        output.append(random.choice(file_handles_msgs))

    event_handles_msgs = [
        f"Die Anzahl der Event-Handles (nevent: {nevent}) liegt im normalen Bereich.",
        f"Mit {nevent} Event-Handles gibt es keine Auffälligkeiten.",
        f"Die Anzahl der Event-Handles (nevent: {nevent}) entspricht den Erwartungen."
    ]

    if nevent <= 10000:
        output.append(random.choice(event_handles_msgs))

    # MalFind Metrics: Analyse der Injektionen und Speicher
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    injections_msgs = [
        f"Die Anzahl der Code-Injektionen (ninjections: {ninjections}) ist im normalen Bereich.",
        f"Mit {ninjections} Code-Injektionen gibt es keine Auffälligkeiten.",
        f"Die {ninjections} Injektionen sind unverdächtig."
    ]

    if ninjections <= 10:
        output.append(random.choice(injections_msgs))

    commit_charge_msgs = [
        f"Der Speicherverbrauch (commitCharge: {commitCharge}) ist unbedenklich.",
        f"Mit einem Speicherverbrauch von {commitCharge} gibt es keine Hinweise auf ungewöhnliche Aktivitäten.",
        f"Der CommitCharge-Wert (commitCharge: {commitCharge}) ist im akzeptablen Bereich."
    ]

    if commitCharge <= 1000:
        output.append(random.choice(commit_charge_msgs))

    # PsxView Metrics: Analyse versteckter Prozesse
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    psxview_msgs = [
        f"Alle Prozesse sind in der PsList vorhanden (psxview_not_in_pslist: {psxview_not_in_pslist}).",
        f"Es gibt keine Prozesse, die in der PsList fehlen (psxview_not_in_pslist: {psxview_not_in_pslist}).",
        f"Alle laufenden Prozesse sind auch in der PsList zu finden (psxview_not_in_pslist: {psxview_not_in_pslist})."
    ]

    if psxview_not_in_pslist == 0:
        output.append(random.choice(psxview_msgs))

    # Callback Metrics: Analyse der anonymen Callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    callbacks_msgs = [
        f"Die Anzahl der anonymen Callbacks (nanonymous: {nanonymous}) ist normal.",
        f"Mit {nanonymous} anonymen Callbacks gibt es keine ungewöhnlichen Aktivitäten.",
        f"Die Anzahl der anonymen Callbacks (nanonymous: {nanonymous}) entspricht den üblichen Werten."
    ]

    if nanonymous <= 200:
        output.append(random.choice(callbacks_msgs))

    # Service Scan Metrics: Analyse von Diensten und Treibern
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    services_msgs = [
        f"Die Anzahl der Dienste (nservices: {nservices}) ist im Normalbereich.",
        f"Es wurden {nservices} Dienste gefunden, was keine Bedenken aufwirft.",
        f"Die Anzahl der laufenden Dienste (nservices: {nservices}) ist unauffällig."
    ]

    if nservices <= 1000:
        output.append(random.choice(services_msgs))

    kernel_drivers_msgs = [
        f"Die Anzahl der Kernel-Treiber (kernel_drivers: {kernel_drivers}) ist unauffällig.",
        f"Mit {kernel_drivers} Kernel-Treibern gibt es keine Hinweise auf ungewöhnliche Aktivitäten.",
        f"Die Anzahl der Kernel-Treiber (kernel_drivers: {kernel_drivers}) ist im normalen Bereich."
    ]

    if kernel_drivers <= 700:
        output.append(random.choice(kernel_drivers_msgs))

    output.append("Verdächtige Aktivitäten wurden nicht erkannt.")

    return " ".join(output)


def main() -> None:
    dataset_manager = DatasetManager('../../../LLM/dataset_Malware/malware_analysis_dataset_2.json')
    csv_file_path = 'output_file_Run_1_labeled.csv'
    create_dataset_from_csv(csv_file_path, dataset_manager)
    print(dataset_manager.get_dataset())

if __name__ == '__main__':
    main()

import csv

from LLM.dataset_Malware.DatasetManager import DatasetManager


def create_dataset_from_csv(csv_file_path: str, dataset_manager: DatasetManager):
    with open(csv_file_path, mode='r', encoding='utf-8') as file:
        csv_reader = csv.DictReader(file)

        for row in csv_reader:
            input_data = ', '.join(
                [f"{key}: {value}" for key, value in row.items() if
                 key != 'Label' and key != 'SubType' and key != 'Raw_Type'])

            instruction = "Analyse von Metriken, um potenzielle Malware-Aktivitäten zu erkennen."

            # Pass the 'Label' field as the second argument to 'analyze_malware_activity'
            label = row.get('Label')  # Ensure 'Label' exists in the row
            output = analyze_malware_activity(row, label)  # Pass both row and label to the function

            dataset_manager.add_entry(instruction, input_data, output)

    dataset_manager.save_to_json()


def analyze_malware_activity(row, label):
    if label == "Benign":
        return analyze_benign_activity(row)
    elif label == "Malware":
        return analyze_malware_activity_details(row)
    else:
        return "Unbekanntes Label"

def analyze_malware_activity_details(row):
    output = ""

    # PsList Metrics: Analyse der Prozesse und Threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    if nproc > 100:
        output += f"Hohe Anzahl an Prozessen (nproc: {nproc}), könnte auf ein kompromittiertes System hinweisen. "
    if nprocs64bit > (nproc / 2):
        output += f"Ein hoher Anteil an 64-Bit-Prozessen (nprocs64bit: {nprocs64bit}) könnte auf fortschrittliche oder versteckte Malware hinweisen. "
    if 8 < avg_threads < 15:
        output += f"Durchschnittliche Threads pro Prozess (avg_threads: {avg_threads}) liegen im typischen Bereich, jedoch sind bei ungewöhnlichen Prozessen weitere Untersuchungen nötig. "

    # DLL List Metrics: Analyse der DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    if ndlls > 5000:
        output += f"Viele DLLs geladen (ndlls: {ndlls}), was auf Malware hindeuten könnte, die übermäßige Bibliotheken verwendet. "
    if avg_dlls_per_proc > 50:
        output += f"Durchschnittlich viele DLLs pro Prozess (avg_dlls_per_proc: {avg_dlls_per_proc}), was untypisch und möglicherweise schädlich ist. "

    # Handle Metrics: Analyse der System-Handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    if nhandles > 50000:
        output += f"Viele Handles im System (nhandles: {nhandles}), was auf ungewöhnliche Aktivität hinweist. "
    if nfile > 2000:
        output += f"Hohe Anzahl an Datei-Handles (nfile: {nfile}), was möglicherweise auf Malware hinweist, die viele Ressourcen manipuliert. "
    if nevent > 10000:
        output += f"Viele Event-Handles (nevent: {nevent}), könnte auf verdächtige Systemereignisse durch Malware hinweisen. "

    # MalFind Metrics: Analyse der Injektionen und Speicher
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    if ninjections > 10:
        output += f"Hohe Anzahl an Code-Injektionen (ninjections: {ninjections}), ein häufiger Indikator für Malware. "
    if commitCharge > 1000:
        output += f"Hoher Speicherverbrauch (commitCharge: {commitCharge}), möglicherweise durch schadhafte Prozesse verursacht. "

    # PsxView Metrics: Analyse versteckter Prozesse
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    if psxview_not_in_pslist > 0:
        output += f"Prozesse fehlen in der PsList (psxview_not_in_pslist: {psxview_not_in_pslist}), was auf verborgene oder schadhafte Prozesse hindeuten könnte. "

    # Callback Metrics: Analyse der anonymen Callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    if nanonymous > 200:
        output += f"Viele anonyme Callbacks (nanonymous: {nanonymous}), eine Technik, die häufig von Malware verwendet wird, um unauffällig zu arbeiten. "

    # Service Scan Metrics: Analyse von Diensten und Treibern
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    if nservices > 1000:
        output += f"Eine hohe Anzahl an Diensten (nservices: {nservices}) könnte auf kompromittierte Systemdienste hinweisen. "
    if kernel_drivers > 700:
        output += f"Eine hohe Anzahl an Kernel-Treibern (kernel_drivers: {kernel_drivers}) könnte auf eine tiefe Systemkompromittierung hinweisen. "

    output += "Verdächtigen Aktivitäten erkannt."

    return output

def analyze_benign_activity(row):
    output = "Das System weist keine verdächtigen Aktivitäten auf. "

    # PsList Metrics: Analyse der Prozesse und Threads
    nproc = int(row['pslist_nproc'])
    avg_threads = float(row['pslist_avg_threads'])
    nprocs64bit = int(row['pslist_nprocs64bit'])

    if nproc <= 100:
        output += f"Die Anzahl der Prozesse (nproc: {nproc}) liegt im normalen Bereich. "
    if nprocs64bit <= (nproc / 2):
        output += f"Der Anteil der 64-Bit-Prozesse (nprocs64bit: {nprocs64bit}) ist unauffällig. "
    if 8 <= avg_threads <= 15:
        output += f"Durchschnittliche Threads pro Prozess (avg_threads: {avg_threads}) im typischen Bereich. "

    # DLL List Metrics: Analyse der DLLs
    ndlls = int(row['dlllist_ndlls'])
    avg_dlls_per_proc = float(row['dlllist_avg_dlls_per_proc'])

    if ndlls <= 5000:
        output += f"Die Anzahl der geladenen DLLs (ndlls: {ndlls}) ist normal. "
    if avg_dlls_per_proc <= 50:
        output += f"Die durchschnittliche Anzahl der DLLs pro Prozess (avg_dlls_per_proc: {avg_dlls_per_proc}) ist unbedenklich. "

    # Handle Metrics: Analyse der System-Handles
    nhandles = int(row['handles_nhandles'])
    avg_handles_per_proc = float(row['handles_avg_handles_per_proc'])
    nfile = int(row['handles_nfile'])
    nevent = int(row['handles_nevent'])

    if nhandles <= 50000:
        output += f"Die Anzahl der Handles (nhandles: {nhandles}) ist unauffällig. "
    if nfile <= 2000:
        output += f"Die Anzahl der Datei-Handles (nfile: {nfile}) ist in Ordnung. "
    if nevent <= 10000:
        output += f"Die Anzahl der Event-Handles (nevent: {nevent}) liegt im normalen Bereich. "

    # MalFind Metrics: Analyse der Injektionen und Speicher
    ninjections = int(row['malfind_ninjections'])
    commitCharge = int(row['malfind_commitCharge'])

    if ninjections <= 10:
        output += f"Die Anzahl der Code-Injektionen (ninjections: {ninjections}) ist im normalen Bereich. "
    if commitCharge <= 1000:
        output += f"Der Speicherverbrauch (commitCharge: {commitCharge}) ist unbedenklich. "

    # PsxView Metrics: Analyse versteckter Prozesse
    psxview_not_in_pslist = int(row['psxview_not_in_pslist'])

    if psxview_not_in_pslist == 0:
        output += f"Alle Prozesse sind in der PsList vorhanden (psxview_not_in_pslist: {psxview_not_in_pslist}). "

    # Callback Metrics: Analyse der anonymen Callbacks
    nanonymous = int(row['callbacks_nanonymous'])

    if nanonymous <= 200:
        output += f"Die Anzahl der anonymen Callbacks (nanonymous: {nanonymous}) ist normal. "

    # Service Scan Metrics: Analyse von Diensten und Treibern
    nservices = int(row['svcscan_nservices'])
    kernel_drivers = int(row['svcscan_kernel_drivers'])

    if nservices <= 1000:
        output += f"Die Anzahl der Dienste (nservices: {nservices}) ist im Normalbereich. "
    if kernel_drivers <= 700:
        output += f"Die Anzahl der Kernel-Treiber (kernel_drivers: {kernel_drivers}) ist unauffällig. "

    output += "Keine verdächtigen Aktivitäten erkannt."

    return output


def main() -> None:
    dataset_manager = DatasetManager('malware_analysis_dataset.json')
    csv_file_path = 'output_file_Run_1_labeled.csv'
    create_dataset_from_csv(csv_file_path, dataset_manager)
    print(dataset_manager.get_dataset())

if __name__ == '__main__':
    main()